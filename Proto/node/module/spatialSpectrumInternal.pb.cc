// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/module/spatialSpectrumInternal.proto

#include "node/module/spatialSpectrumInternal.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace zb {
namespace dcts {
namespace node {
namespace module {
namespace spatailSpectrum {
namespace internal {
constexpr DeviceReply::DeviceReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_code_(0)
{}
struct DeviceReplyDefaultTypeInternal {
  constexpr DeviceReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceReplyDefaultTypeInternal() {}
  union {
    DeviceReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceReplyDefaultTypeInternal _DeviceReply_default_instance_;
constexpr WorkMode::WorkMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : antenna_mode_(0)
  , receive_mode_(0)
  , gain_(0)
  , interval_(0){}
struct WorkModeDefaultTypeInternal {
  constexpr WorkModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WorkModeDefaultTypeInternal() {}
  union {
    WorkMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WorkModeDefaultTypeInternal _WorkMode_default_instance_;
constexpr CalibrationParam::CalibrationParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : antenna_mode_(0)
  , gain_(0)
  , downconverter_mode_(0)
  , downconverter_if_attenuation_(0)
  , receive_mode_(0)
  , receive_rf_attenuation_(0)
  , receive_if_attenuation_(0)
  , attenuation_mode_(0){}
struct CalibrationParamDefaultTypeInternal {
  constexpr CalibrationParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CalibrationParamDefaultTypeInternal() {}
  union {
    CalibrationParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CalibrationParamDefaultTypeInternal _CalibrationParam_default_instance_;
constexpr ThresholdMode::ThresholdMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
  , value_(0){}
struct ThresholdModeDefaultTypeInternal {
  constexpr ThresholdModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThresholdModeDefaultTypeInternal() {}
  union {
    ThresholdMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThresholdModeDefaultTypeInternal _ThresholdMode_default_instance_;
constexpr BandParam::BandParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : span_(nullptr)
  , if_bandwidth_(0){}
struct BandParamDefaultTypeInternal {
  constexpr BandParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BandParamDefaultTypeInternal() {}
  union {
    BandParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BandParamDefaultTypeInternal _BandParam_default_instance_;
constexpr SpectrumData::SpectrumData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : amplitude_()
  , _amplitude_cached_byte_size_()
  , span_(nullptr){}
struct SpectrumDataDefaultTypeInternal {
  constexpr SpectrumDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpectrumDataDefaultTypeInternal() {}
  union {
    SpectrumData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpectrumDataDefaultTypeInternal _SpectrumData_default_instance_;
constexpr PanoramicScanRequest::PanoramicScanRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_mode_(nullptr)
  , band_param_(nullptr)
  , calibration_param_(nullptr)
  , scan_type_(0){}
struct PanoramicScanRequestDefaultTypeInternal {
  constexpr PanoramicScanRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PanoramicScanRequestDefaultTypeInternal() {}
  union {
    PanoramicScanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PanoramicScanRequestDefaultTypeInternal _PanoramicScanRequest_default_instance_;
constexpr PanoramicScanResult::PanoramicScanResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectrum_(nullptr){}
struct PanoramicScanResultDefaultTypeInternal {
  constexpr PanoramicScanResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PanoramicScanResultDefaultTypeInternal() {}
  union {
    PanoramicScanResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PanoramicScanResultDefaultTypeInternal _PanoramicScanResult_default_instance_;
constexpr DiscreteScanRequest::DiscreteScanRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : band_param_()
  , work_mode_(nullptr){}
struct DiscreteScanRequestDefaultTypeInternal {
  constexpr DiscreteScanRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscreteScanRequestDefaultTypeInternal() {}
  union {
    DiscreteScanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscreteScanRequestDefaultTypeInternal _DiscreteScanRequest_default_instance_;
constexpr DiscreteScanResult::DiscreteScanResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectrum_(nullptr)
  , band_index_(0){}
struct DiscreteScanResultDefaultTypeInternal {
  constexpr DiscreteScanResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscreteScanResultDefaultTypeInternal() {}
  union {
    DiscreteScanResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscreteScanResultDefaultTypeInternal _DiscreteScanResult_default_instance_;
constexpr DirectionRequest::DirectionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_mode_(nullptr)
  , threshold_mode_(nullptr)
  , center_freq_(0)
  , if_bandwidth_(0)
  , df_bandwidth_(0)
  , target_count_(0){}
struct DirectionRequestDefaultTypeInternal {
  constexpr DirectionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionRequestDefaultTypeInternal() {}
  union {
    DirectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionRequestDefaultTypeInternal _DirectionRequest_default_instance_;
constexpr TargetDirection::TargetDirection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_frequency_(0)
  , direction_(0)
  , confidence_(0)
  , amplitude_(0){}
struct TargetDirectionDefaultTypeInternal {
  constexpr TargetDirectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetDirectionDefaultTypeInternal() {}
  union {
    TargetDirection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetDirectionDefaultTypeInternal _TargetDirection_default_instance_;
constexpr DirectionResult::DirectionResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_detection_(){}
struct DirectionResultDefaultTypeInternal {
  constexpr DirectionResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionResultDefaultTypeInternal() {}
  union {
    DirectionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionResultDefaultTypeInternal _DirectionResult_default_instance_;
constexpr DirectionSpectrum::DirectionSpectrum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectrum_(nullptr){}
struct DirectionSpectrumDefaultTypeInternal {
  constexpr DirectionSpectrumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectionSpectrumDefaultTypeInternal() {}
  union {
    DirectionSpectrum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectionSpectrumDefaultTypeInternal _DirectionSpectrum_default_instance_;
constexpr SignalAnalysisRequest::SignalAnalysisRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_mode_(nullptr)
  , band_param_(nullptr)
  , threshold_mode_(nullptr){}
struct SignalAnalysisRequestDefaultTypeInternal {
  constexpr SignalAnalysisRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalAnalysisRequestDefaultTypeInternal() {}
  union {
    SignalAnalysisRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalAnalysisRequestDefaultTypeInternal _SignalAnalysisRequest_default_instance_;
constexpr SignalAnalysisResult::SignalAnalysisResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : signal_band_(nullptr)
  , modulation_type_(0)

  , amplitude_(0){}
struct SignalAnalysisResultDefaultTypeInternal {
  constexpr SignalAnalysisResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalAnalysisResultDefaultTypeInternal() {}
  union {
    SignalAnalysisResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalAnalysisResultDefaultTypeInternal _SignalAnalysisResult_default_instance_;
constexpr SignalAnalysisSpectrum::SignalAnalysisSpectrum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : spectrum_(nullptr){}
struct SignalAnalysisSpectrumDefaultTypeInternal {
  constexpr SignalAnalysisSpectrumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignalAnalysisSpectrumDefaultTypeInternal() {}
  union {
    SignalAnalysisSpectrum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignalAnalysisSpectrumDefaultTypeInternal _SignalAnalysisSpectrum_default_instance_;
constexpr IQRequest::IQRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : work_mode_(nullptr)
  , band_param_(nullptr)
  , points_(0u){}
struct IQRequestDefaultTypeInternal {
  constexpr IQRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IQRequestDefaultTypeInternal() {}
  union {
    IQRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IQRequestDefaultTypeInternal _IQRequest_default_instance_;
constexpr IQResult::IQResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , _data_cached_byte_size_()
  , base_band_(nullptr){}
struct IQResultDefaultTypeInternal {
  constexpr IQResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IQResultDefaultTypeInternal() {}
  union {
    IQResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IQResultDefaultTypeInternal _IQResult_default_instance_;
constexpr DeviceStatus::DeviceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connected_(false)
  , processor_temperature_(0)
  , processor_status_(0)

  , receiver_temperature_(0)
  , receiver_status_(0)

  , mainctl_kernel_temp_(0)
  , mainctl_temperature_(0)
  , mainctl_humidity_(0)
  , mainctl_vccin_(0)
  , mainctl_status_(0)
{}
struct DeviceStatusDefaultTypeInternal {
  constexpr DeviceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
}  // namespace internal
}  // namespace spatailSpectrum
}  // namespace module
}  // namespace node
}  // namespace dcts
}  // namespace zb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2fmodule_2fspatialSpectrumInternal_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_node_2fmodule_2fspatialSpectrumInternal_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2fmodule_2fspatialSpectrumInternal_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply, error_code_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply, error_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode, antenna_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode, gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, antenna_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, gain_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, downconverter_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, downconverter_if_attenuation_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, receive_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, receive_rf_attenuation_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, receive_if_attenuation_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam, attenuation_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode, mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::BandParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::BandParam, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::BandParam, if_bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData, span_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData, amplitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest, work_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest, band_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest, calibration_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest, scan_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult, spectrum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest, work_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest, band_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult, band_index_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult, spectrum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, work_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, center_freq_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, if_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, df_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, threshold_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest, target_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection, center_frequency_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection, direction_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection, confidence_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection, amplitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult, target_detection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum, spectrum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest, work_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest, band_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest, threshold_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult, signal_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult, modulation_type_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult, amplitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum, spectrum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQRequest, work_mode_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQRequest, band_param_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQRequest, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQResult, base_band_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::IQResult, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, connected_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, processor_temperature_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, processor_status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, receiver_temperature_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, receiver_status_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, mainctl_kernel_temp_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, mainctl_temperature_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, mainctl_humidity_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, mainctl_vccin_),
  PROTOBUF_FIELD_OFFSET(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus, mainctl_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply)},
  { 7, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode)},
  { 16, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam)},
  { 29, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode)},
  { 36, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::BandParam)},
  { 43, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData)},
  { 50, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest)},
  { 59, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult)},
  { 65, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest)},
  { 72, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult)},
  { 79, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest)},
  { 90, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection)},
  { 99, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult)},
  { 105, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum)},
  { 111, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest)},
  { 119, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult)},
  { 127, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum)},
  { 133, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::IQRequest)},
  { 141, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::IQResult)},
  { 148, -1, sizeof(::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DeviceReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_WorkMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_CalibrationParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_ThresholdMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_BandParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_SpectrumData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_PanoramicScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_PanoramicScanResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DiscreteScanRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DiscreteScanResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DirectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_TargetDirection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DirectionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DirectionSpectrum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_SignalAnalysisRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_SignalAnalysisResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_SignalAnalysisSpectrum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_IQRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_IQResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::zb::dcts::node::module::spatailSpectrum::internal::_DeviceStatus_default_instance_),
};

const char descriptor_table_protodef_node_2fmodule_2fspatialSpectrumInternal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)node/module/spatialSpectrumInternal.pr"
  "oto\022,zb.dcts.node.module.spatailSpectrum"
  ".internal\032\025node/modulation.proto\032\023node/s"
  "pectrum.proto\032\033google/protobuf/empty.pro"
  "to\"\253\001\n\013DeviceReply\022W\n\nerror_code\030\001 \001(\0162C"
  ".zb.dcts.node.module.spatailSpectrum.int"
  "ernal.DeviceReply.ErrorCode\022\022\n\nerror_inf"
  "o\030\002 \001(\t\"/\n\tErrorCode\022\016\n\nERROR_NONE\020\000\022\022\n\016"
  "ERROR_INTERNAL\020\001\"V\n\010WorkMode\022\024\n\014antenna_"
  "mode\030\001 \001(\005\022\024\n\014receive_mode\030\002 \001(\005\022\014\n\004gain"
  "\030\003 \001(\005\022\020\n\010interval\030\004 \001(\005\"\350\001\n\020Calibration"
  "Param\022\024\n\014antenna_mode\030\001 \001(\005\022\014\n\004gain\030\002 \001("
  "\005\022\032\n\022downconverter_mode\030\003 \001(\005\022$\n\034downcon"
  "verter_if_attenuation\030\004 \001(\005\022\024\n\014receive_m"
  "ode\030\005 \001(\005\022\036\n\026receive_rf_attenuation\030\006 \001("
  "\005\022\036\n\026receive_if_attenuation\030\007 \001(\005\022\030\n\020att"
  "enuation_mode\030\010 \001(\005\",\n\rThresholdMode\022\014\n\004"
  "mode\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"U\n\tBandParam\0222"
  "\n\004span\030\001 \001(\0132$.zb.dcts.node.spectrum.Fre"
  "quencySpan\022\024\n\014IF_bandwidth\030\002 \001(\001\"U\n\014Spec"
  "trumData\0222\n\004span\030\001 \001(\0132$.zb.dcts.node.sp"
  "ectrum.FrequencySpan\022\021\n\tamplitude\030\002 \003(\002\""
  "\234\002\n\024PanoramicScanRequest\022I\n\twork_mode\030\001 "
  "\001(\01326.zb.dcts.node.module.spatailSpectru"
  "m.internal.WorkMode\022K\n\nband_param\030\002 \001(\0132"
  "7.zb.dcts.node.module.spatailSpectrum.in"
  "ternal.BandParam\022Y\n\021calibration_param\030\003 "
  "\001(\0132>.zb.dcts.node.module.spatailSpectru"
  "m.internal.CalibrationParam\022\021\n\tscan_type"
  "\030\004 \001(\005\"c\n\023PanoramicScanResult\022L\n\010spectru"
  "m\030\001 \001(\0132:.zb.dcts.node.module.spatailSpe"
  "ctrum.internal.SpectrumData\"\255\001\n\023Discrete"
  "ScanRequest\022I\n\twork_mode\030\001 \001(\01326.zb.dcts"
  ".node.module.spatailSpectrum.internal.Wo"
  "rkMode\022K\n\nband_param\030\002 \003(\01327.zb.dcts.nod"
  "e.module.spatailSpectrum.internal.BandPa"
  "ram\"v\n\022DiscreteScanResult\022\022\n\nband_index\030"
  "\001 \001(\005\022L\n\010spectrum\030\002 \001(\0132:.zb.dcts.node.m"
  "odule.spatailSpectrum.internal.SpectrumD"
  "ata\"\211\002\n\020DirectionRequest\022I\n\twork_mode\030\001 "
  "\001(\01326.zb.dcts.node.module.spatailSpectru"
  "m.internal.WorkMode\022\023\n\013center_freq\030\002 \001(\001"
  "\022\024\n\014if_bandwidth\030\003 \001(\001\022\024\n\014df_bandwidth\030\004"
  " \001(\001\022S\n\016threshold_mode\030\005 \001(\0132;.zb.dcts.n"
  "ode.module.spatailSpectrum.internal.Thre"
  "sholdMode\022\024\n\014target_count\030\006 \001(\005\"e\n\017Targe"
  "tDirection\022\030\n\020center_frequency\030\001 \001(\001\022\021\n\t"
  "direction\030\002 \001(\001\022\022\n\nconfidence\030\003 \001(\005\022\021\n\ta"
  "mplitude\030\004 \001(\002\"j\n\017DirectionResult\022W\n\020tar"
  "get_detection\030\001 \003(\0132=.zb.dcts.node.modul"
  "e.spatailSpectrum.internal.TargetDirecti"
  "on\"a\n\021DirectionSpectrum\022L\n\010spectrum\030\001 \001("
  "\0132:.zb.dcts.node.module.spatailSpectrum."
  "internal.SpectrumData\"\204\002\n\025SignalAnalysis"
  "Request\022I\n\twork_mode\030\001 \001(\01326.zb.dcts.nod"
  "e.module.spatailSpectrum.internal.WorkMo"
  "de\022K\n\nband_param\030\002 \001(\01327.zb.dcts.node.mo"
  "dule.spatailSpectrum.internal.BandParam\022"
  "S\n\016threshold_mode\030\003 \001(\0132;.zb.dcts.node.m"
  "odule.spatailSpectrum.internal.Threshold"
  "Mode\"\234\001\n\024SignalAnalysisResult\0226\n\013signal_"
  "band\030\001 \001(\0132!.zb.dcts.node.spectrum.Signa"
  "lBand\0229\n\017modulation_type\030\002 \001(\0162 .zb.dcts"
  ".node.modulation.ModType\022\021\n\tamplitude\030\003 "
  "\001(\002\"f\n\026SignalAnalysisSpectrum\022L\n\010spectru"
  "m\030\001 \001(\0132:.zb.dcts.node.module.spatailSpe"
  "ctrum.internal.SpectrumData\"\263\001\n\tIQReques"
  "t\022I\n\twork_mode\030\001 \001(\01326.zb.dcts.node.modu"
  "le.spatailSpectrum.internal.WorkMode\022K\n\n"
  "band_param\030\002 \001(\01327.zb.dcts.node.module.s"
  "patailSpectrum.internal.BandParam\022\016\n\006poi"
  "nts\030\003 \001(\r\"L\n\010IQResult\0222\n\tbase_band\030\001 \001(\013"
  "2\037.zb.dcts.node.spectrum.BaseBand\022\014\n\004dat"
  "a\030\004 \003(\002\"\310\003\n\014DeviceStatus\022\021\n\tconnected\030\001 "
  "\001(\010\022\035\n\025processor_temperature\030\002 \001(\002\022T\n\020pr"
  "ocessor_status\030\003 \001(\0162:.zb.dcts.node.modu"
  "le.spatailSpectrum.internal.ModuleStatus"
  "\022\034\n\024receiver_temperature\030\004 \001(\002\022S\n\017receiv"
  "er_status\030\005 \001(\0162:.zb.dcts.node.module.sp"
  "atailSpectrum.internal.ModuleStatus\022\033\n\023m"
  "ainctl_kernel_temp\030\006 \001(\002\022\033\n\023mainctl_temp"
  "erature\030\007 \001(\002\022\030\n\020mainctl_humidity\030\010 \001(\002\022"
  "\025\n\rmainctl_vccin\030\t \001(\002\022R\n\016mainctl_status"
  "\030\n \001(\0162:.zb.dcts.node.module.spatailSpec"
  "trum.internal.ModuleStatus*(\n\014ModuleStat"
  "us\022\014\n\010ABNORMAL\020\000\022\n\n\006NORMAL\020\0012\361\021\n\024DeviceC"
  "ontrolService\022\221\001\n\016StartPanoramic\022B.zb.dc"
  "ts.node.module.spatailSpectrum.internal."
  "PanoramicScanRequest\0329.zb.dcts.node.modu"
  "le.spatailSpectrum.internal.DeviceReply\""
  "\000\022d\n\rStopPanoramic\022\026.google.protobuf.Emp"
  "ty\0329.zb.dcts.node.module.spatailSpectrum"
  ".internal.DeviceReply\"\000\022u\n\024GetPanoramicS"
  "pectrum\022\026.google.protobuf.Empty\032A.zb.dct"
  "s.node.module.spatailSpectrum.internal.P"
  "anoramicScanResult\"\0000\001\022\223\001\n\021StartDiscrete"
  "Band\022A.zb.dcts.node.module.spatailSpectr"
  "um.internal.DiscreteScanRequest\0329.zb.dct"
  "s.node.module.spatailSpectrum.internal.D"
  "eviceReply\"\000\022g\n\020StopDiscreteBand\022\026.googl"
  "e.protobuf.Empty\0329.zb.dcts.node.module.s"
  "patailSpectrum.internal.DeviceReply\"\000\022w\n"
  "\027GetDiscreteBandSpectrum\022\026.google.protob"
  "uf.Empty\032@.zb.dcts.node.module.spatailSp"
  "ectrum.internal.DiscreteScanResult\"\0000\001\022\227"
  "\001\n\023StartSignalAnalysis\022C.zb.dcts.node.mo"
  "dule.spatailSpectrum.internal.SignalAnal"
  "ysisRequest\0329.zb.dcts.node.module.spatai"
  "lSpectrum.internal.DeviceReply\"\000\022i\n\022Stop"
  "SignalAnalysis\022\026.google.protobuf.Empty\0329"
  ".zb.dcts.node.module.spatailSpectrum.int"
  "ernal.DeviceReply\"\000\022}\n\031GetSignalAnalysis"
  "Spectrum\022\026.google.protobuf.Empty\032D.zb.dc"
  "ts.node.module.spatailSpectrum.internal."
  "SignalAnalysisSpectrum\"\0000\001\022i\n\023GetSignalA"
  "nalysisIQ\022\026.google.protobuf.Empty\0326.zb.d"
  "cts.node.module.spatailSpectrum.internal"
  ".IQResult\"\0000\001\022y\n\027GetSignalAnalysisResult"
  "\022\026.google.protobuf.Empty\032B.zb.dcts.node."
  "module.spatailSpectrum.internal.SignalAn"
  "alysisResult\"\0000\001\022\215\001\n\016StartDirection\022>.zb"
  ".dcts.node.module.spatailSpectrum.intern"
  "al.DirectionRequest\0329.zb.dcts.node.modul"
  "e.spatailSpectrum.internal.DeviceReply\"\000"
  "\022d\n\rStopDirection\022\026.google.protobuf.Empt"
  "y\0329.zb.dcts.node.module.spatailSpectrum."
  "internal.DeviceReply\"\000\022s\n\024GetDirectionSp"
  "ectrum\022\026.google.protobuf.Empty\032\?.zb.dcts"
  ".node.module.spatailSpectrum.internal.Di"
  "rectionSpectrum\"\0000\001\022o\n\022GetDirectionResul"
  "t\022\026.google.protobuf.Empty\032=.zb.dcts.node"
  ".module.spatailSpectrum.internal.Directi"
  "onResult\"\0000\001\022\177\n\007StartIQ\0227.zb.dcts.node.m"
  "odule.spatailSpectrum.internal.IQRequest"
  "\0329.zb.dcts.node.module.spatailSpectrum.i"
  "nternal.DeviceReply\"\000\022]\n\006StopIQ\022\026.google"
  ".protobuf.Empty\0329.zb.dcts.node.module.sp"
  "atailSpectrum.internal.DeviceReply\"\000\022_\n\t"
  "GetIQData\022\026.google.protobuf.Empty\0326.zb.d"
  "cts.node.module.spatailSpectrum.internal"
  ".IQResult\"\0000\001\022i\n\017GetDeviceStatus\022\026.googl"
  "e.protobuf.Empty\032:.zb.dcts.node.module.s"
  "patailSpectrum.internal.DeviceStatus\"\0000\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_node_2fmodulation_2eproto,
  &::descriptor_table_node_2fspectrum_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto = {
  false, false, 5728, descriptor_table_protodef_node_2fmodule_2fspatialSpectrumInternal_2eproto, "node/module/spatialSpectrumInternal.proto", 
  &descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_once, descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_deps, 3, 20,
  schemas, file_default_instances, TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto::offsets,
  file_level_metadata_node_2fmodule_2fspatialSpectrumInternal_2eproto, file_level_enum_descriptors_node_2fmodule_2fspatialSpectrumInternal_2eproto, file_level_service_descriptors_node_2fmodule_2fspatialSpectrumInternal_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto);
  return descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_node_2fmodule_2fspatialSpectrumInternal_2eproto(&descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto);
namespace zb {
namespace dcts {
namespace node {
namespace module {
namespace spatailSpectrum {
namespace internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceReply_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto);
  return file_level_enum_descriptors_node_2fmodule_2fspatialSpectrumInternal_2eproto[0];
}
bool DeviceReply_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DeviceReply_ErrorCode DeviceReply::ERROR_NONE;
constexpr DeviceReply_ErrorCode DeviceReply::ERROR_INTERNAL;
constexpr DeviceReply_ErrorCode DeviceReply::ErrorCode_MIN;
constexpr DeviceReply_ErrorCode DeviceReply::ErrorCode_MAX;
constexpr int DeviceReply::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModuleStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto);
  return file_level_enum_descriptors_node_2fmodule_2fspatialSpectrumInternal_2eproto[1];
}
bool ModuleStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DeviceReply::_Internal {
 public:
};

DeviceReply::DeviceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
}
DeviceReply::DeviceReply(const DeviceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_info().empty()) {
    error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_info(), 
      GetArena());
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
}

void DeviceReply::SharedCtor() {
error_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_code_ = 0;
}

DeviceReply::~DeviceReply() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceReply::ArenaDtor(void* object) {
  DeviceReply* _this = reinterpret_cast< DeviceReply* >(object);
  (void)_this;
}
void DeviceReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_info_.ClearToEmpty();
  error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.ErrorCode error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string error_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error_code(), target);
  }

  // string error_info = 2;
  if (this->error_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_info().data(), static_cast<int>(this->_internal_error_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  return target;
}

size_t DeviceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_info = 2;
  if (this->error_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_info());
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
    MergeFrom(*source);
  }
}

void DeviceReply::MergeFrom(const DeviceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_info().size() > 0) {
    _internal_set_error_info(from._internal_error_info());
  }
  if (from.error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
}

void DeviceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceReply::CopyFrom(const DeviceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceReply::IsInitialized() const {
  return true;
}

void DeviceReply::InternalSwap(DeviceReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_info_.Swap(&other->error_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class WorkMode::_Internal {
 public:
};

WorkMode::WorkMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
}
WorkMode::WorkMode(const WorkMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_mode_, &from.antenna_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&antenna_mode_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
}

void WorkMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&antenna_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&antenna_mode_)) + sizeof(interval_));
}

WorkMode::~WorkMode() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WorkMode::ArenaDtor(void* object) {
  WorkMode* _this = reinterpret_cast< WorkMode* >(object);
  (void)_this;
}
void WorkMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorkMode::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&antenna_mode_)) + sizeof(interval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 antenna_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 interval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 antenna_mode = 1;
  if (this->antenna_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_antenna_mode(), target);
  }

  // int32 receive_mode = 2;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_receive_mode(), target);
  }

  // int32 gain = 3;
  if (this->gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_gain(), target);
  }

  // int32 interval = 4;
  if (this->interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  return target;
}

size_t WorkMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 antenna_mode = 1;
  if (this->antenna_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna_mode());
  }

  // int32 receive_mode = 2;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // int32 gain = 3;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain());
  }

  // int32 interval = 4;
  if (this->interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
    MergeFrom(*source);
  }
}

void WorkMode::MergeFrom(const WorkMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.antenna_mode() != 0) {
    _internal_set_antenna_mode(from._internal_antenna_mode());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (from.gain() != 0) {
    _internal_set_gain(from._internal_gain());
  }
  if (from.interval() != 0) {
    _internal_set_interval(from._internal_interval());
  }
}

void WorkMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkMode::CopyFrom(const WorkMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkMode::IsInitialized() const {
  return true;
}

void WorkMode::InternalSwap(WorkMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkMode, interval_)
      + sizeof(WorkMode::interval_)
      - PROTOBUF_FIELD_OFFSET(WorkMode, antenna_mode_)>(
          reinterpret_cast<char*>(&antenna_mode_),
          reinterpret_cast<char*>(&other->antenna_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CalibrationParam::_Internal {
 public:
};

CalibrationParam::CalibrationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
}
CalibrationParam::CalibrationParam(const CalibrationParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&antenna_mode_, &from.antenna_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&attenuation_mode_) -
    reinterpret_cast<char*>(&antenna_mode_)) + sizeof(attenuation_mode_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
}

void CalibrationParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&antenna_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attenuation_mode_) -
    reinterpret_cast<char*>(&antenna_mode_)) + sizeof(attenuation_mode_));
}

CalibrationParam::~CalibrationParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CalibrationParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CalibrationParam::ArenaDtor(void* object) {
  CalibrationParam* _this = reinterpret_cast< CalibrationParam* >(object);
  (void)_this;
}
void CalibrationParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CalibrationParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CalibrationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&antenna_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attenuation_mode_) -
      reinterpret_cast<char*>(&antenna_mode_)) + sizeof(attenuation_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalibrationParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 antenna_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          antenna_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 downconverter_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          downconverter_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 downconverter_if_attenuation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          downconverter_if_attenuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          receive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_rf_attenuation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          receive_rf_attenuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 receive_if_attenuation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          receive_if_attenuation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 attenuation_mode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          attenuation_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CalibrationParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 antenna_mode = 1;
  if (this->antenna_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_antenna_mode(), target);
  }

  // int32 gain = 2;
  if (this->gain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gain(), target);
  }

  // int32 downconverter_mode = 3;
  if (this->downconverter_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_downconverter_mode(), target);
  }

  // int32 downconverter_if_attenuation = 4;
  if (this->downconverter_if_attenuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_downconverter_if_attenuation(), target);
  }

  // int32 receive_mode = 5;
  if (this->receive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_receive_mode(), target);
  }

  // int32 receive_rf_attenuation = 6;
  if (this->receive_rf_attenuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_receive_rf_attenuation(), target);
  }

  // int32 receive_if_attenuation = 7;
  if (this->receive_if_attenuation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_receive_if_attenuation(), target);
  }

  // int32 attenuation_mode = 8;
  if (this->attenuation_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_attenuation_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  return target;
}

size_t CalibrationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 antenna_mode = 1;
  if (this->antenna_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_antenna_mode());
  }

  // int32 gain = 2;
  if (this->gain() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gain());
  }

  // int32 downconverter_mode = 3;
  if (this->downconverter_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_downconverter_mode());
  }

  // int32 downconverter_if_attenuation = 4;
  if (this->downconverter_if_attenuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_downconverter_if_attenuation());
  }

  // int32 receive_mode = 5;
  if (this->receive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_mode());
  }

  // int32 receive_rf_attenuation = 6;
  if (this->receive_rf_attenuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_rf_attenuation());
  }

  // int32 receive_if_attenuation = 7;
  if (this->receive_if_attenuation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_receive_if_attenuation());
  }

  // int32 attenuation_mode = 8;
  if (this->attenuation_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_attenuation_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CalibrationParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CalibrationParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CalibrationParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
    MergeFrom(*source);
  }
}

void CalibrationParam::MergeFrom(const CalibrationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.antenna_mode() != 0) {
    _internal_set_antenna_mode(from._internal_antenna_mode());
  }
  if (from.gain() != 0) {
    _internal_set_gain(from._internal_gain());
  }
  if (from.downconverter_mode() != 0) {
    _internal_set_downconverter_mode(from._internal_downconverter_mode());
  }
  if (from.downconverter_if_attenuation() != 0) {
    _internal_set_downconverter_if_attenuation(from._internal_downconverter_if_attenuation());
  }
  if (from.receive_mode() != 0) {
    _internal_set_receive_mode(from._internal_receive_mode());
  }
  if (from.receive_rf_attenuation() != 0) {
    _internal_set_receive_rf_attenuation(from._internal_receive_rf_attenuation());
  }
  if (from.receive_if_attenuation() != 0) {
    _internal_set_receive_if_attenuation(from._internal_receive_if_attenuation());
  }
  if (from.attenuation_mode() != 0) {
    _internal_set_attenuation_mode(from._internal_attenuation_mode());
  }
}

void CalibrationParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CalibrationParam::CopyFrom(const CalibrationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrationParam::IsInitialized() const {
  return true;
}

void CalibrationParam::InternalSwap(CalibrationParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalibrationParam, attenuation_mode_)
      + sizeof(CalibrationParam::attenuation_mode_)
      - PROTOBUF_FIELD_OFFSET(CalibrationParam, antenna_mode_)>(
          reinterpret_cast<char*>(&antenna_mode_),
          reinterpret_cast<char*>(&other->antenna_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CalibrationParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ThresholdMode::_Internal {
 public:
};

ThresholdMode::ThresholdMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
}
ThresholdMode::ThresholdMode(const ThresholdMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
}

void ThresholdMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(value_));
}

ThresholdMode::~ThresholdMode() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThresholdMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThresholdMode::ArenaDtor(void* object) {
  ThresholdMode* _this = reinterpret_cast< ThresholdMode* >(object);
  (void)_this;
}
void ThresholdMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThresholdMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThresholdMode::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThresholdMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThresholdMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mode(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  return target;
}

size_t ThresholdMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mode());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThresholdMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  GOOGLE_DCHECK_NE(&from, this);
  const ThresholdMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThresholdMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
    MergeFrom(*source);
  }
}

void ThresholdMode::MergeFrom(const ThresholdMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void ThresholdMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThresholdMode::CopyFrom(const ThresholdMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThresholdMode::IsInitialized() const {
  return true;
}

void ThresholdMode::InternalSwap(ThresholdMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThresholdMode, value_)
      + sizeof(ThresholdMode::value_)
      - PROTOBUF_FIELD_OFFSET(ThresholdMode, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThresholdMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BandParam::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& span(const BandParam* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
BandParam::_Internal::span(const BandParam* msg) {
  return *msg->span_;
}
void BandParam::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
BandParam::BandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
}
BandParam::BandParam(const BandParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  if_bandwidth_ = from.if_bandwidth_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
}

void BandParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&span_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&if_bandwidth_) -
    reinterpret_cast<char*>(&span_)) + sizeof(if_bandwidth_));
}

BandParam::~BandParam() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BandParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void BandParam::ArenaDtor(void* object) {
  BandParam* _this = reinterpret_cast< BandParam* >(object);
  (void)_this;
}
void BandParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BandParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BandParam::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  if_bandwidth_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BandParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double IF_bandwidth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          if_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BandParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::span(this), target, stream);
  }

  // double IF_bandwidth = 2;
  if (!(this->if_bandwidth() <= 0 && this->if_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_if_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  return target;
}

size_t BandParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  // double IF_bandwidth = 2;
  if (!(this->if_bandwidth() <= 0 && this->if_bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BandParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  GOOGLE_DCHECK_NE(&from, this);
  const BandParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BandParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
    MergeFrom(*source);
  }
}

void BandParam::MergeFrom(const BandParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_span());
  }
  if (!(from.if_bandwidth() <= 0 && from.if_bandwidth() >= 0)) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
}

void BandParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BandParam::CopyFrom(const BandParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandParam::IsInitialized() const {
  return true;
}

void BandParam::InternalSwap(BandParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BandParam, if_bandwidth_)
      + sizeof(BandParam::if_bandwidth_)
      - PROTOBUF_FIELD_OFFSET(BandParam, span_)>(
          reinterpret_cast<char*>(&span_),
          reinterpret_cast<char*>(&other->span_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BandParam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SpectrumData::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::FrequencySpan& span(const SpectrumData* msg);
};

const ::zb::dcts::node::spectrum::FrequencySpan&
SpectrumData::_Internal::span(const SpectrumData* msg) {
  return *msg->span_;
}
void SpectrumData::clear_span() {
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
SpectrumData::SpectrumData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amplitude_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
}
SpectrumData::SpectrumData(const SpectrumData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      amplitude_(from.amplitude_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_span()) {
    span_ = new ::zb::dcts::node::spectrum::FrequencySpan(*from.span_);
  } else {
    span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
}

void SpectrumData::SharedCtor() {
span_ = nullptr;
}

SpectrumData::~SpectrumData() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpectrumData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete span_;
}

void SpectrumData::ArenaDtor(void* object) {
  SpectrumData* _this = reinterpret_cast< SpectrumData* >(object);
  (void)_this;
}
void SpectrumData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpectrumData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpectrumData::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amplitude_.Clear();
  if (GetArena() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpectrumData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.FrequencySpan span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float amplitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_amplitude(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_amplitude(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpectrumData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::span(this), target, stream);
  }

  // repeated float amplitude = 2;
  if (this->_internal_amplitude_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_amplitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  return target;
}

size_t SpectrumData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float amplitude = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_amplitude_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _amplitude_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpectrumData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  GOOGLE_DCHECK_NE(&from, this);
  const SpectrumData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpectrumData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
    MergeFrom(*source);
  }
}

void SpectrumData::MergeFrom(const SpectrumData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amplitude_.MergeFrom(from.amplitude_);
  if (from.has_span()) {
    _internal_mutable_span()->::zb::dcts::node::spectrum::FrequencySpan::MergeFrom(from._internal_span());
  }
}

void SpectrumData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpectrumData::CopyFrom(const SpectrumData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpectrumData::IsInitialized() const {
  return true;
}

void SpectrumData::InternalSwap(SpectrumData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  amplitude_.InternalSwap(&other->amplitude_);
  swap(span_, other->span_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpectrumData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PanoramicScanRequest::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode(const PanoramicScanRequest* msg);
  static const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param(const PanoramicScanRequest* msg);
  static const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam& calibration_param(const PanoramicScanRequest* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&
PanoramicScanRequest::_Internal::work_mode(const PanoramicScanRequest* msg) {
  return *msg->work_mode_;
}
const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam&
PanoramicScanRequest::_Internal::band_param(const PanoramicScanRequest* msg) {
  return *msg->band_param_;
}
const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam&
PanoramicScanRequest::_Internal::calibration_param(const PanoramicScanRequest* msg) {
  return *msg->calibration_param_;
}
PanoramicScanRequest::PanoramicScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
}
PanoramicScanRequest::PanoramicScanRequest(const PanoramicScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work_mode()) {
    work_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode(*from.work_mode_);
  } else {
    work_mode_ = nullptr;
  }
  if (from._internal_has_band_param()) {
    band_param_ = new ::zb::dcts::node::module::spatailSpectrum::internal::BandParam(*from.band_param_);
  } else {
    band_param_ = nullptr;
  }
  if (from._internal_has_calibration_param()) {
    calibration_param_ = new ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam(*from.calibration_param_);
  } else {
    calibration_param_ = nullptr;
  }
  scan_type_ = from.scan_type_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
}

void PanoramicScanRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&work_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scan_type_) -
    reinterpret_cast<char*>(&work_mode_)) + sizeof(scan_type_));
}

PanoramicScanRequest::~PanoramicScanRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PanoramicScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_mode_;
  if (this != internal_default_instance()) delete band_param_;
  if (this != internal_default_instance()) delete calibration_param_;
}

void PanoramicScanRequest::ArenaDtor(void* object) {
  PanoramicScanRequest* _this = reinterpret_cast< PanoramicScanRequest* >(object);
  (void)_this;
}
void PanoramicScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PanoramicScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PanoramicScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
  if (GetArena() == nullptr && band_param_ != nullptr) {
    delete band_param_;
  }
  band_param_ = nullptr;
  if (GetArena() == nullptr && calibration_param_ != nullptr) {
    delete calibration_param_;
  }
  calibration_param_ = nullptr;
  scan_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PanoramicScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam calibration_param = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_calibration_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scan_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scan_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PanoramicScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work_mode(this), target, stream);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  if (this->has_band_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::band_param(this), target, stream);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam calibration_param = 3;
  if (this->has_calibration_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::calibration_param(this), target, stream);
  }

  // int32 scan_type = 4;
  if (this->scan_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_scan_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  return target;
}

size_t PanoramicScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_mode_);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  if (this->has_band_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_param_);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam calibration_param = 3;
  if (this->has_calibration_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calibration_param_);
  }

  // int32 scan_type = 4;
  if (this->scan_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scan_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PanoramicScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PanoramicScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PanoramicScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
    MergeFrom(*source);
  }
}

void PanoramicScanRequest::MergeFrom(const PanoramicScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work_mode()) {
    _internal_mutable_work_mode()->::zb::dcts::node::module::spatailSpectrum::internal::WorkMode::MergeFrom(from._internal_work_mode());
  }
  if (from.has_band_param()) {
    _internal_mutable_band_param()->::zb::dcts::node::module::spatailSpectrum::internal::BandParam::MergeFrom(from._internal_band_param());
  }
  if (from.has_calibration_param()) {
    _internal_mutable_calibration_param()->::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam::MergeFrom(from._internal_calibration_param());
  }
  if (from.scan_type() != 0) {
    _internal_set_scan_type(from._internal_scan_type());
  }
}

void PanoramicScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanoramicScanRequest::CopyFrom(const PanoramicScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanoramicScanRequest::IsInitialized() const {
  return true;
}

void PanoramicScanRequest::InternalSwap(PanoramicScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PanoramicScanRequest, scan_type_)
      + sizeof(PanoramicScanRequest::scan_type_)
      - PROTOBUF_FIELD_OFFSET(PanoramicScanRequest, work_mode_)>(
          reinterpret_cast<char*>(&work_mode_),
          reinterpret_cast<char*>(&other->work_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PanoramicScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PanoramicScanResult::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum(const PanoramicScanResult* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&
PanoramicScanResult::_Internal::spectrum(const PanoramicScanResult* msg) {
  return *msg->spectrum_;
}
PanoramicScanResult::PanoramicScanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
}
PanoramicScanResult::PanoramicScanResult(const PanoramicScanResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spectrum()) {
    spectrum_ = new ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData(*from.spectrum_);
  } else {
    spectrum_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
}

void PanoramicScanResult::SharedCtor() {
spectrum_ = nullptr;
}

PanoramicScanResult::~PanoramicScanResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PanoramicScanResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spectrum_;
}

void PanoramicScanResult::ArenaDtor(void* object) {
  PanoramicScanResult* _this = reinterpret_cast< PanoramicScanResult* >(object);
  (void)_this;
}
void PanoramicScanResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PanoramicScanResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PanoramicScanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PanoramicScanResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PanoramicScanResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  if (this->has_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spectrum(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  return target;
}

size_t PanoramicScanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  if (this->has_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PanoramicScanResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PanoramicScanResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PanoramicScanResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
    MergeFrom(*source);
  }
}

void PanoramicScanResult::MergeFrom(const PanoramicScanResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spectrum()) {
    _internal_mutable_spectrum()->::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData::MergeFrom(from._internal_spectrum());
  }
}

void PanoramicScanResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PanoramicScanResult::CopyFrom(const PanoramicScanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanoramicScanResult::IsInitialized() const {
  return true;
}

void PanoramicScanResult::InternalSwap(PanoramicScanResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(spectrum_, other->spectrum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PanoramicScanResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiscreteScanRequest::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode(const DiscreteScanRequest* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&
DiscreteScanRequest::_Internal::work_mode(const DiscreteScanRequest* msg) {
  return *msg->work_mode_;
}
DiscreteScanRequest::DiscreteScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  band_param_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
}
DiscreteScanRequest::DiscreteScanRequest(const DiscreteScanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      band_param_(from.band_param_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work_mode()) {
    work_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode(*from.work_mode_);
  } else {
    work_mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
}

void DiscreteScanRequest::SharedCtor() {
work_mode_ = nullptr;
}

DiscreteScanRequest::~DiscreteScanRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscreteScanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_mode_;
}

void DiscreteScanRequest::ArenaDtor(void* object) {
  DiscreteScanRequest* _this = reinterpret_cast< DiscreteScanRequest* >(object);
  (void)_this;
}
void DiscreteScanRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteScanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscreteScanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  band_param_.Clear();
  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteScanRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_band_param(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteScanRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work_mode(this), target, stream);
  }

  // repeated .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_band_param_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_band_param(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  return target;
}

size_t DiscreteScanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  total_size += 1UL * this->_internal_band_param_size();
  for (const auto& msg : this->band_param_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_mode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteScanRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteScanRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteScanRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
    MergeFrom(*source);
  }
}

void DiscreteScanRequest::MergeFrom(const DiscreteScanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  band_param_.MergeFrom(from.band_param_);
  if (from.has_work_mode()) {
    _internal_mutable_work_mode()->::zb::dcts::node::module::spatailSpectrum::internal::WorkMode::MergeFrom(from._internal_work_mode());
  }
}

void DiscreteScanRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteScanRequest::CopyFrom(const DiscreteScanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteScanRequest::IsInitialized() const {
  return true;
}

void DiscreteScanRequest::InternalSwap(DiscreteScanRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  band_param_.InternalSwap(&other->band_param_);
  swap(work_mode_, other->work_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteScanRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DiscreteScanResult::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum(const DiscreteScanResult* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&
DiscreteScanResult::_Internal::spectrum(const DiscreteScanResult* msg) {
  return *msg->spectrum_;
}
DiscreteScanResult::DiscreteScanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
}
DiscreteScanResult::DiscreteScanResult(const DiscreteScanResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spectrum()) {
    spectrum_ = new ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData(*from.spectrum_);
  } else {
    spectrum_ = nullptr;
  }
  band_index_ = from.band_index_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
}

void DiscreteScanResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&spectrum_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&band_index_) -
    reinterpret_cast<char*>(&spectrum_)) + sizeof(band_index_));
}

DiscreteScanResult::~DiscreteScanResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiscreteScanResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spectrum_;
}

void DiscreteScanResult::ArenaDtor(void* object) {
  DiscreteScanResult* _this = reinterpret_cast< DiscreteScanResult* >(object);
  (void)_this;
}
void DiscreteScanResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscreteScanResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscreteScanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
  band_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscreteScanResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 band_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          band_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiscreteScanResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 band_index = 1;
  if (this->band_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_band_index(), target);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 2;
  if (this->has_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spectrum(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  return target;
}

size_t DiscreteScanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 2;
  if (this->has_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_);
  }

  // int32 band_index = 1;
  if (this->band_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_band_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscreteScanResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DiscreteScanResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiscreteScanResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
    MergeFrom(*source);
  }
}

void DiscreteScanResult::MergeFrom(const DiscreteScanResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spectrum()) {
    _internal_mutable_spectrum()->::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData::MergeFrom(from._internal_spectrum());
  }
  if (from.band_index() != 0) {
    _internal_set_band_index(from._internal_band_index());
  }
}

void DiscreteScanResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscreteScanResult::CopyFrom(const DiscreteScanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscreteScanResult::IsInitialized() const {
  return true;
}

void DiscreteScanResult::InternalSwap(DiscreteScanResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscreteScanResult, band_index_)
      + sizeof(DiscreteScanResult::band_index_)
      - PROTOBUF_FIELD_OFFSET(DiscreteScanResult, spectrum_)>(
          reinterpret_cast<char*>(&spectrum_),
          reinterpret_cast<char*>(&other->spectrum_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscreteScanResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectionRequest::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode(const DirectionRequest* msg);
  static const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& threshold_mode(const DirectionRequest* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&
DirectionRequest::_Internal::work_mode(const DirectionRequest* msg) {
  return *msg->work_mode_;
}
const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode&
DirectionRequest::_Internal::threshold_mode(const DirectionRequest* msg) {
  return *msg->threshold_mode_;
}
DirectionRequest::DirectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
}
DirectionRequest::DirectionRequest(const DirectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work_mode()) {
    work_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode(*from.work_mode_);
  } else {
    work_mode_ = nullptr;
  }
  if (from._internal_has_threshold_mode()) {
    threshold_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode(*from.threshold_mode_);
  } else {
    threshold_mode_ = nullptr;
  }
  ::memcpy(&center_freq_, &from.center_freq_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_count_) -
    reinterpret_cast<char*>(&center_freq_)) + sizeof(target_count_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
}

void DirectionRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&work_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_count_) -
    reinterpret_cast<char*>(&work_mode_)) + sizeof(target_count_));
}

DirectionRequest::~DirectionRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_mode_;
  if (this != internal_default_instance()) delete threshold_mode_;
}

void DirectionRequest::ArenaDtor(void* object) {
  DirectionRequest* _this = reinterpret_cast< DirectionRequest* >(object);
  (void)_this;
}
void DirectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
  if (GetArena() == nullptr && threshold_mode_ != nullptr) {
    delete threshold_mode_;
  }
  threshold_mode_ = nullptr;
  ::memset(&center_freq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_count_) -
      reinterpret_cast<char*>(&center_freq_)) + sizeof(target_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double center_freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          center_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double if_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          if_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double df_bandwidth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          df_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          target_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work_mode(this), target, stream);
  }

  // double center_freq = 2;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_center_freq(), target);
  }

  // double if_bandwidth = 3;
  if (!(this->if_bandwidth() <= 0 && this->if_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_if_bandwidth(), target);
  }

  // double df_bandwidth = 4;
  if (!(this->df_bandwidth() <= 0 && this->df_bandwidth() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_df_bandwidth(), target);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 5;
  if (this->has_threshold_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::threshold_mode(this), target, stream);
  }

  // int32 target_count = 6;
  if (this->target_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_target_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  return target;
}

size_t DirectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_mode_);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 5;
  if (this->has_threshold_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *threshold_mode_);
  }

  // double center_freq = 2;
  if (!(this->center_freq() <= 0 && this->center_freq() >= 0)) {
    total_size += 1 + 8;
  }

  // double if_bandwidth = 3;
  if (!(this->if_bandwidth() <= 0 && this->if_bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // double df_bandwidth = 4;
  if (!(this->df_bandwidth() <= 0 && this->df_bandwidth() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 target_count = 6;
  if (this->target_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
    MergeFrom(*source);
  }
}

void DirectionRequest::MergeFrom(const DirectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work_mode()) {
    _internal_mutable_work_mode()->::zb::dcts::node::module::spatailSpectrum::internal::WorkMode::MergeFrom(from._internal_work_mode());
  }
  if (from.has_threshold_mode()) {
    _internal_mutable_threshold_mode()->::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode::MergeFrom(from._internal_threshold_mode());
  }
  if (!(from.center_freq() <= 0 && from.center_freq() >= 0)) {
    _internal_set_center_freq(from._internal_center_freq());
  }
  if (!(from.if_bandwidth() <= 0 && from.if_bandwidth() >= 0)) {
    _internal_set_if_bandwidth(from._internal_if_bandwidth());
  }
  if (!(from.df_bandwidth() <= 0 && from.df_bandwidth() >= 0)) {
    _internal_set_df_bandwidth(from._internal_df_bandwidth());
  }
  if (from.target_count() != 0) {
    _internal_set_target_count(from._internal_target_count());
  }
}

void DirectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionRequest::CopyFrom(const DirectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionRequest::IsInitialized() const {
  return true;
}

void DirectionRequest::InternalSwap(DirectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectionRequest, target_count_)
      + sizeof(DirectionRequest::target_count_)
      - PROTOBUF_FIELD_OFFSET(DirectionRequest, work_mode_)>(
          reinterpret_cast<char*>(&work_mode_),
          reinterpret_cast<char*>(&other->work_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TargetDirection::_Internal {
 public:
};

TargetDirection::TargetDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
}
TargetDirection::TargetDirection(const TargetDirection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&center_frequency_, &from.center_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(amplitude_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
}

void TargetDirection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_frequency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&center_frequency_)) + sizeof(amplitude_));
}

TargetDirection::~TargetDirection() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TargetDirection::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TargetDirection::ArenaDtor(void* object) {
  TargetDirection* _this = reinterpret_cast< TargetDirection* >(object);
  (void)_this;
}
void TargetDirection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetDirection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetDirection::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&center_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amplitude_) -
      reinterpret_cast<char*>(&center_frequency_)) + sizeof(amplitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetDirection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double center_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          center_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float amplitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TargetDirection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_center_frequency(), target);
  }

  // double direction = 2;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_direction(), target);
  }

  // int32 confidence = 3;
  if (this->confidence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_confidence(), target);
  }

  // float amplitude = 4;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_amplitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  return target;
}

size_t TargetDirection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double center_frequency = 1;
  if (!(this->center_frequency() <= 0 && this->center_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // double direction = 2;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confidence());
  }

  // float amplitude = 4;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetDirection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  GOOGLE_DCHECK_NE(&from, this);
  const TargetDirection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TargetDirection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
    MergeFrom(*source);
  }
}

void TargetDirection::MergeFrom(const TargetDirection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.center_frequency() <= 0 && from.center_frequency() >= 0)) {
    _internal_set_center_frequency(from._internal_center_frequency());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.confidence() != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.amplitude() <= 0 && from.amplitude() >= 0)) {
    _internal_set_amplitude(from._internal_amplitude());
  }
}

void TargetDirection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetDirection::CopyFrom(const TargetDirection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetDirection::IsInitialized() const {
  return true;
}

void TargetDirection::InternalSwap(TargetDirection* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetDirection, amplitude_)
      + sizeof(TargetDirection::amplitude_)
      - PROTOBUF_FIELD_OFFSET(TargetDirection, center_frequency_)>(
          reinterpret_cast<char*>(&center_frequency_),
          reinterpret_cast<char*>(&other->center_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetDirection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectionResult::_Internal {
 public:
};

DirectionResult::DirectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  target_detection_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
}
DirectionResult::DirectionResult(const DirectionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_detection_(from.target_detection_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
}

void DirectionResult::SharedCtor() {
}

DirectionResult::~DirectionResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DirectionResult::ArenaDtor(void* object) {
  DirectionResult* _this = reinterpret_cast< DirectionResult* >(object);
  (void)_this;
}
void DirectionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_detection_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .zb.dcts.node.module.spatailSpectrum.internal.TargetDirection target_detection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zb.dcts.node.module.spatailSpectrum.internal.TargetDirection target_detection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_target_detection_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_target_detection(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  return target;
}

size_t DirectionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .zb.dcts.node.module.spatailSpectrum.internal.TargetDirection target_detection = 1;
  total_size += 1UL * this->_internal_target_detection_size();
  for (const auto& msg : this->target_detection_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
    MergeFrom(*source);
  }
}

void DirectionResult::MergeFrom(const DirectionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_detection_.MergeFrom(from.target_detection_);
}

void DirectionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionResult::CopyFrom(const DirectionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionResult::IsInitialized() const {
  return true;
}

void DirectionResult::InternalSwap(DirectionResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_detection_.InternalSwap(&other->target_detection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DirectionSpectrum::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum(const DirectionSpectrum* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&
DirectionSpectrum::_Internal::spectrum(const DirectionSpectrum* msg) {
  return *msg->spectrum_;
}
DirectionSpectrum::DirectionSpectrum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
}
DirectionSpectrum::DirectionSpectrum(const DirectionSpectrum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spectrum()) {
    spectrum_ = new ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData(*from.spectrum_);
  } else {
    spectrum_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
}

void DirectionSpectrum::SharedCtor() {
spectrum_ = nullptr;
}

DirectionSpectrum::~DirectionSpectrum() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectionSpectrum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spectrum_;
}

void DirectionSpectrum::ArenaDtor(void* object) {
  DirectionSpectrum* _this = reinterpret_cast< DirectionSpectrum* >(object);
  (void)_this;
}
void DirectionSpectrum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectionSpectrum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectionSpectrum::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectionSpectrum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectionSpectrum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  if (this->has_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spectrum(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  return target;
}

size_t DirectionSpectrum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  if (this->has_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectionSpectrum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectionSpectrum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectionSpectrum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
    MergeFrom(*source);
  }
}

void DirectionSpectrum::MergeFrom(const DirectionSpectrum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spectrum()) {
    _internal_mutable_spectrum()->::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData::MergeFrom(from._internal_spectrum());
  }
}

void DirectionSpectrum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectionSpectrum::CopyFrom(const DirectionSpectrum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectionSpectrum::IsInitialized() const {
  return true;
}

void DirectionSpectrum::InternalSwap(DirectionSpectrum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(spectrum_, other->spectrum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectionSpectrum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalAnalysisRequest::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode(const SignalAnalysisRequest* msg);
  static const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param(const SignalAnalysisRequest* msg);
  static const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& threshold_mode(const SignalAnalysisRequest* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&
SignalAnalysisRequest::_Internal::work_mode(const SignalAnalysisRequest* msg) {
  return *msg->work_mode_;
}
const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam&
SignalAnalysisRequest::_Internal::band_param(const SignalAnalysisRequest* msg) {
  return *msg->band_param_;
}
const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode&
SignalAnalysisRequest::_Internal::threshold_mode(const SignalAnalysisRequest* msg) {
  return *msg->threshold_mode_;
}
SignalAnalysisRequest::SignalAnalysisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
}
SignalAnalysisRequest::SignalAnalysisRequest(const SignalAnalysisRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work_mode()) {
    work_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode(*from.work_mode_);
  } else {
    work_mode_ = nullptr;
  }
  if (from._internal_has_band_param()) {
    band_param_ = new ::zb::dcts::node::module::spatailSpectrum::internal::BandParam(*from.band_param_);
  } else {
    band_param_ = nullptr;
  }
  if (from._internal_has_threshold_mode()) {
    threshold_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode(*from.threshold_mode_);
  } else {
    threshold_mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
}

void SignalAnalysisRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&work_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&threshold_mode_) -
    reinterpret_cast<char*>(&work_mode_)) + sizeof(threshold_mode_));
}

SignalAnalysisRequest::~SignalAnalysisRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalAnalysisRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_mode_;
  if (this != internal_default_instance()) delete band_param_;
  if (this != internal_default_instance()) delete threshold_mode_;
}

void SignalAnalysisRequest::ArenaDtor(void* object) {
  SignalAnalysisRequest* _this = reinterpret_cast< SignalAnalysisRequest* >(object);
  (void)_this;
}
void SignalAnalysisRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalAnalysisRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalAnalysisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
  if (GetArena() == nullptr && band_param_ != nullptr) {
    delete band_param_;
  }
  band_param_ = nullptr;
  if (GetArena() == nullptr && threshold_mode_ != nullptr) {
    delete threshold_mode_;
  }
  threshold_mode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalAnalysisRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_threshold_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalAnalysisRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work_mode(this), target, stream);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  if (this->has_band_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::band_param(this), target, stream);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 3;
  if (this->has_threshold_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::threshold_mode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  return target;
}

size_t SignalAnalysisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_mode_);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  if (this->has_band_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_param_);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 3;
  if (this->has_threshold_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *threshold_mode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalAnalysisRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalAnalysisRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalAnalysisRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
    MergeFrom(*source);
  }
}

void SignalAnalysisRequest::MergeFrom(const SignalAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work_mode()) {
    _internal_mutable_work_mode()->::zb::dcts::node::module::spatailSpectrum::internal::WorkMode::MergeFrom(from._internal_work_mode());
  }
  if (from.has_band_param()) {
    _internal_mutable_band_param()->::zb::dcts::node::module::spatailSpectrum::internal::BandParam::MergeFrom(from._internal_band_param());
  }
  if (from.has_threshold_mode()) {
    _internal_mutable_threshold_mode()->::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode::MergeFrom(from._internal_threshold_mode());
  }
}

void SignalAnalysisRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalAnalysisRequest::CopyFrom(const SignalAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalAnalysisRequest::IsInitialized() const {
  return true;
}

void SignalAnalysisRequest::InternalSwap(SignalAnalysisRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalAnalysisRequest, threshold_mode_)
      + sizeof(SignalAnalysisRequest::threshold_mode_)
      - PROTOBUF_FIELD_OFFSET(SignalAnalysisRequest, work_mode_)>(
          reinterpret_cast<char*>(&work_mode_),
          reinterpret_cast<char*>(&other->work_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalAnalysisRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalAnalysisResult::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::SignalBand& signal_band(const SignalAnalysisResult* msg);
};

const ::zb::dcts::node::spectrum::SignalBand&
SignalAnalysisResult::_Internal::signal_band(const SignalAnalysisResult* msg) {
  return *msg->signal_band_;
}
void SignalAnalysisResult::clear_signal_band() {
  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
}
SignalAnalysisResult::SignalAnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
}
SignalAnalysisResult::SignalAnalysisResult(const SignalAnalysisResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_signal_band()) {
    signal_band_ = new ::zb::dcts::node::spectrum::SignalBand(*from.signal_band_);
  } else {
    signal_band_ = nullptr;
  }
  ::memcpy(&modulation_type_, &from.modulation_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&modulation_type_)) + sizeof(amplitude_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
}

void SignalAnalysisResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&signal_band_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amplitude_) -
    reinterpret_cast<char*>(&signal_band_)) + sizeof(amplitude_));
}

SignalAnalysisResult::~SignalAnalysisResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalAnalysisResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete signal_band_;
}

void SignalAnalysisResult::ArenaDtor(void* object) {
  SignalAnalysisResult* _this = reinterpret_cast< SignalAnalysisResult* >(object);
  (void)_this;
}
void SignalAnalysisResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalAnalysisResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalAnalysisResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && signal_band_ != nullptr) {
    delete signal_band_;
  }
  signal_band_ = nullptr;
  ::memset(&modulation_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amplitude_) -
      reinterpret_cast<char*>(&modulation_type_)) + sizeof(amplitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalAnalysisResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.SignalBand signal_band = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.modulation.ModType modulation_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_modulation_type(static_cast<::zb::dcts::node::modulation::ModType>(val));
        } else goto handle_unusual;
        continue;
      // float amplitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          amplitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalAnalysisResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.SignalBand signal_band = 1;
  if (this->has_signal_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::signal_band(this), target, stream);
  }

  // .zb.dcts.node.modulation.ModType modulation_type = 2;
  if (this->modulation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_modulation_type(), target);
  }

  // float amplitude = 3;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_amplitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  return target;
}

size_t SignalAnalysisResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.SignalBand signal_band = 1;
  if (this->has_signal_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signal_band_);
  }

  // .zb.dcts.node.modulation.ModType modulation_type = 2;
  if (this->modulation_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_modulation_type());
  }

  // float amplitude = 3;
  if (!(this->amplitude() <= 0 && this->amplitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalAnalysisResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalAnalysisResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalAnalysisResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
    MergeFrom(*source);
  }
}

void SignalAnalysisResult::MergeFrom(const SignalAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signal_band()) {
    _internal_mutable_signal_band()->::zb::dcts::node::spectrum::SignalBand::MergeFrom(from._internal_signal_band());
  }
  if (from.modulation_type() != 0) {
    _internal_set_modulation_type(from._internal_modulation_type());
  }
  if (!(from.amplitude() <= 0 && from.amplitude() >= 0)) {
    _internal_set_amplitude(from._internal_amplitude());
  }
}

void SignalAnalysisResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalAnalysisResult::CopyFrom(const SignalAnalysisResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalAnalysisResult::IsInitialized() const {
  return true;
}

void SignalAnalysisResult::InternalSwap(SignalAnalysisResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignalAnalysisResult, amplitude_)
      + sizeof(SignalAnalysisResult::amplitude_)
      - PROTOBUF_FIELD_OFFSET(SignalAnalysisResult, signal_band_)>(
          reinterpret_cast<char*>(&signal_band_),
          reinterpret_cast<char*>(&other->signal_band_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalAnalysisResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SignalAnalysisSpectrum::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum(const SignalAnalysisSpectrum* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&
SignalAnalysisSpectrum::_Internal::spectrum(const SignalAnalysisSpectrum* msg) {
  return *msg->spectrum_;
}
SignalAnalysisSpectrum::SignalAnalysisSpectrum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
}
SignalAnalysisSpectrum::SignalAnalysisSpectrum(const SignalAnalysisSpectrum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spectrum()) {
    spectrum_ = new ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData(*from.spectrum_);
  } else {
    spectrum_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
}

void SignalAnalysisSpectrum::SharedCtor() {
spectrum_ = nullptr;
}

SignalAnalysisSpectrum::~SignalAnalysisSpectrum() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SignalAnalysisSpectrum::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete spectrum_;
}

void SignalAnalysisSpectrum::ArenaDtor(void* object) {
  SignalAnalysisSpectrum* _this = reinterpret_cast< SignalAnalysisSpectrum* >(object);
  (void)_this;
}
void SignalAnalysisSpectrum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SignalAnalysisSpectrum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SignalAnalysisSpectrum::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignalAnalysisSpectrum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spectrum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalAnalysisSpectrum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  if (this->has_spectrum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::spectrum(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  return target;
}

size_t SignalAnalysisSpectrum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  if (this->has_spectrum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spectrum_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalAnalysisSpectrum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalAnalysisSpectrum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalAnalysisSpectrum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
    MergeFrom(*source);
  }
}

void SignalAnalysisSpectrum::MergeFrom(const SignalAnalysisSpectrum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_spectrum()) {
    _internal_mutable_spectrum()->::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData::MergeFrom(from._internal_spectrum());
  }
}

void SignalAnalysisSpectrum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalAnalysisSpectrum::CopyFrom(const SignalAnalysisSpectrum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalAnalysisSpectrum::IsInitialized() const {
  return true;
}

void SignalAnalysisSpectrum::InternalSwap(SignalAnalysisSpectrum* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(spectrum_, other->spectrum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalAnalysisSpectrum::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IQRequest::_Internal {
 public:
  static const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode(const IQRequest* msg);
  static const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param(const IQRequest* msg);
};

const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&
IQRequest::_Internal::work_mode(const IQRequest* msg) {
  return *msg->work_mode_;
}
const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam&
IQRequest::_Internal::band_param(const IQRequest* msg) {
  return *msg->band_param_;
}
IQRequest::IQRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
}
IQRequest::IQRequest(const IQRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_work_mode()) {
    work_mode_ = new ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode(*from.work_mode_);
  } else {
    work_mode_ = nullptr;
  }
  if (from._internal_has_band_param()) {
    band_param_ = new ::zb::dcts::node::module::spatailSpectrum::internal::BandParam(*from.band_param_);
  } else {
    band_param_ = nullptr;
  }
  points_ = from.points_;
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
}

void IQRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&work_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&points_) -
    reinterpret_cast<char*>(&work_mode_)) + sizeof(points_));
}

IQRequest::~IQRequest() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IQRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete work_mode_;
  if (this != internal_default_instance()) delete band_param_;
}

void IQRequest::ArenaDtor(void* object) {
  IQRequest* _this = reinterpret_cast< IQRequest* >(object);
  (void)_this;
}
void IQRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IQRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IQRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
  if (GetArena() == nullptr && band_param_ != nullptr) {
    delete band_param_;
  }
  band_param_ = nullptr;
  points_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IQRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_band_param(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IQRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::work_mode(this), target, stream);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  if (this->has_band_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::band_param(this), target, stream);
  }

  // uint32 points = 3;
  if (this->points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  return target;
}

size_t IQRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  if (this->has_work_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_mode_);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  if (this->has_band_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *band_param_);
  }

  // uint32 points = 3;
  if (this->points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_points());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IQRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IQRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IQRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
    MergeFrom(*source);
  }
}

void IQRequest::MergeFrom(const IQRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_work_mode()) {
    _internal_mutable_work_mode()->::zb::dcts::node::module::spatailSpectrum::internal::WorkMode::MergeFrom(from._internal_work_mode());
  }
  if (from.has_band_param()) {
    _internal_mutable_band_param()->::zb::dcts::node::module::spatailSpectrum::internal::BandParam::MergeFrom(from._internal_band_param());
  }
  if (from.points() != 0) {
    _internal_set_points(from._internal_points());
  }
}

void IQRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQRequest::CopyFrom(const IQRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQRequest::IsInitialized() const {
  return true;
}

void IQRequest::InternalSwap(IQRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IQRequest, points_)
      + sizeof(IQRequest::points_)
      - PROTOBUF_FIELD_OFFSET(IQRequest, work_mode_)>(
          reinterpret_cast<char*>(&work_mode_),
          reinterpret_cast<char*>(&other->work_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IQRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IQResult::_Internal {
 public:
  static const ::zb::dcts::node::spectrum::BaseBand& base_band(const IQResult* msg);
};

const ::zb::dcts::node::spectrum::BaseBand&
IQResult::_Internal::base_band(const IQResult* msg) {
  return *msg->base_band_;
}
void IQResult::clear_base_band() {
  if (GetArena() == nullptr && base_band_ != nullptr) {
    delete base_band_;
  }
  base_band_ = nullptr;
}
IQResult::IQResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
}
IQResult::IQResult(const IQResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_band()) {
    base_band_ = new ::zb::dcts::node::spectrum::BaseBand(*from.base_band_);
  } else {
    base_band_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
}

void IQResult::SharedCtor() {
base_band_ = nullptr;
}

IQResult::~IQResult() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IQResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_band_;
}

void IQResult::ArenaDtor(void* object) {
  IQResult* _this = reinterpret_cast< IQResult* >(object);
  (void)_this;
}
void IQResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IQResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IQResult::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArena() == nullptr && base_band_ != nullptr) {
    delete base_band_;
  }
  base_band_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IQResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .zb.dcts.node.spectrum.BaseBand base_band = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IQResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .zb.dcts.node.spectrum.BaseBand base_band = 1;
  if (this->has_base_band()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_band(this), target, stream);
  }

  // repeated float data = 4;
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  return target;
}

size_t IQResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .zb.dcts.node.spectrum.BaseBand base_band = 1;
  if (this->has_base_band()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_band_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IQResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  GOOGLE_DCHECK_NE(&from, this);
  const IQResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IQResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
    MergeFrom(*source);
  }
}

void IQResult::MergeFrom(const IQResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_base_band()) {
    _internal_mutable_base_band()->::zb::dcts::node::spectrum::BaseBand::MergeFrom(from._internal_base_band());
  }
}

void IQResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IQResult::CopyFrom(const IQResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IQResult::IsInitialized() const {
  return true;
}

void IQResult::InternalSwap(IQResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  swap(base_band_, other->base_band_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IQResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeviceStatus::_Internal {
 public:
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&connected_, &from.connected_,
    static_cast<size_t>(reinterpret_cast<char*>(&mainctl_status_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(mainctl_status_));
  // @@protoc_insertion_point(copy_constructor:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connected_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mainctl_status_) -
    reinterpret_cast<char*>(&connected_)) + sizeof(mainctl_status_));
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeviceStatus::ArenaDtor(void* object) {
  DeviceStatus* _this = reinterpret_cast< DeviceStatus* >(object);
  (void)_this;
}
void DeviceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&connected_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mainctl_status_) -
      reinterpret_cast<char*>(&connected_)) + sizeof(mainctl_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool connected = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float processor_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          processor_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus processor_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_processor_status(static_cast<::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus>(val));
        } else goto handle_unusual;
        continue;
      // float receiver_temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          receiver_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus receiver_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_receiver_status(static_cast<::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus>(val));
        } else goto handle_unusual;
        continue;
      // float mainctl_kernel_temp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          mainctl_kernel_temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mainctl_temperature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          mainctl_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mainctl_humidity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          mainctl_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mainctl_vccin = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          mainctl_vccin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus mainctl_status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mainctl_status(static_cast<::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_connected(), target);
  }

  // float processor_temperature = 2;
  if (!(this->processor_temperature() <= 0 && this->processor_temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_processor_temperature(), target);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus processor_status = 3;
  if (this->processor_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_processor_status(), target);
  }

  // float receiver_temperature = 4;
  if (!(this->receiver_temperature() <= 0 && this->receiver_temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_receiver_temperature(), target);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus receiver_status = 5;
  if (this->receiver_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_receiver_status(), target);
  }

  // float mainctl_kernel_temp = 6;
  if (!(this->mainctl_kernel_temp() <= 0 && this->mainctl_kernel_temp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_mainctl_kernel_temp(), target);
  }

  // float mainctl_temperature = 7;
  if (!(this->mainctl_temperature() <= 0 && this->mainctl_temperature() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_mainctl_temperature(), target);
  }

  // float mainctl_humidity = 8;
  if (!(this->mainctl_humidity() <= 0 && this->mainctl_humidity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_mainctl_humidity(), target);
  }

  // float mainctl_vccin = 9;
  if (!(this->mainctl_vccin() <= 0 && this->mainctl_vccin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_mainctl_vccin(), target);
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus mainctl_status = 10;
  if (this->mainctl_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_mainctl_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool connected = 1;
  if (this->connected() != 0) {
    total_size += 1 + 1;
  }

  // float processor_temperature = 2;
  if (!(this->processor_temperature() <= 0 && this->processor_temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus processor_status = 3;
  if (this->processor_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_processor_status());
  }

  // float receiver_temperature = 4;
  if (!(this->receiver_temperature() <= 0 && this->receiver_temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus receiver_status = 5;
  if (this->receiver_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_receiver_status());
  }

  // float mainctl_kernel_temp = 6;
  if (!(this->mainctl_kernel_temp() <= 0 && this->mainctl_kernel_temp() >= 0)) {
    total_size += 1 + 4;
  }

  // float mainctl_temperature = 7;
  if (!(this->mainctl_temperature() <= 0 && this->mainctl_temperature() >= 0)) {
    total_size += 1 + 4;
  }

  // float mainctl_humidity = 8;
  if (!(this->mainctl_humidity() <= 0 && this->mainctl_humidity() >= 0)) {
    total_size += 1 + 4;
  }

  // float mainctl_vccin = 9;
  if (!(this->mainctl_vccin() <= 0 && this->mainctl_vccin() >= 0)) {
    total_size += 1 + 4;
  }

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus mainctl_status = 10;
  if (this->mainctl_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mainctl_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
    MergeFrom(*source);
  }
}

void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (!(from.processor_temperature() <= 0 && from.processor_temperature() >= 0)) {
    _internal_set_processor_temperature(from._internal_processor_temperature());
  }
  if (from.processor_status() != 0) {
    _internal_set_processor_status(from._internal_processor_status());
  }
  if (!(from.receiver_temperature() <= 0 && from.receiver_temperature() >= 0)) {
    _internal_set_receiver_temperature(from._internal_receiver_temperature());
  }
  if (from.receiver_status() != 0) {
    _internal_set_receiver_status(from._internal_receiver_status());
  }
  if (!(from.mainctl_kernel_temp() <= 0 && from.mainctl_kernel_temp() >= 0)) {
    _internal_set_mainctl_kernel_temp(from._internal_mainctl_kernel_temp());
  }
  if (!(from.mainctl_temperature() <= 0 && from.mainctl_temperature() >= 0)) {
    _internal_set_mainctl_temperature(from._internal_mainctl_temperature());
  }
  if (!(from.mainctl_humidity() <= 0 && from.mainctl_humidity() >= 0)) {
    _internal_set_mainctl_humidity(from._internal_mainctl_humidity());
  }
  if (!(from.mainctl_vccin() <= 0 && from.mainctl_vccin() >= 0)) {
    _internal_set_mainctl_vccin(from._internal_mainctl_vccin());
  }
  if (from.mainctl_status() != 0) {
    _internal_set_mainctl_status(from._internal_mainctl_status());
  }
}

void DeviceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, mainctl_status_)
      + sizeof(DeviceStatus::mainctl_status_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, connected_)>(
          reinterpret_cast<char*>(&connected_),
          reinterpret_cast<char*>(&other->connected_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace spatailSpectrum
}  // namespace module
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::IQRequest* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::IQRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::IQRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::IQResult* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::IQResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::IQResult >(arena);
}
template<> PROTOBUF_NOINLINE ::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus* Arena::CreateMaybeMessage< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
