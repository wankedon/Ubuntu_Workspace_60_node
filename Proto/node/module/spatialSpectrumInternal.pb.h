// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node/module/spatialSpectrumInternal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2fmodule_2fspatialSpectrumInternal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2fmodule_2fspatialSpectrumInternal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "node/modulation.pb.h"
#include "node/spectrum.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2fmodule_2fspatialSpectrumInternal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(int index);
namespace zb {
namespace dcts {
namespace node {
namespace module {
namespace spatailSpectrum {
namespace internal {
class BandParam;
struct BandParamDefaultTypeInternal;
extern BandParamDefaultTypeInternal _BandParam_default_instance_;
class CalibrationParam;
struct CalibrationParamDefaultTypeInternal;
extern CalibrationParamDefaultTypeInternal _CalibrationParam_default_instance_;
class DeviceReply;
struct DeviceReplyDefaultTypeInternal;
extern DeviceReplyDefaultTypeInternal _DeviceReply_default_instance_;
class DeviceStatus;
struct DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class DirectionRequest;
struct DirectionRequestDefaultTypeInternal;
extern DirectionRequestDefaultTypeInternal _DirectionRequest_default_instance_;
class DirectionResult;
struct DirectionResultDefaultTypeInternal;
extern DirectionResultDefaultTypeInternal _DirectionResult_default_instance_;
class DirectionSpectrum;
struct DirectionSpectrumDefaultTypeInternal;
extern DirectionSpectrumDefaultTypeInternal _DirectionSpectrum_default_instance_;
class DiscreteScanRequest;
struct DiscreteScanRequestDefaultTypeInternal;
extern DiscreteScanRequestDefaultTypeInternal _DiscreteScanRequest_default_instance_;
class DiscreteScanResult;
struct DiscreteScanResultDefaultTypeInternal;
extern DiscreteScanResultDefaultTypeInternal _DiscreteScanResult_default_instance_;
class IQRequest;
struct IQRequestDefaultTypeInternal;
extern IQRequestDefaultTypeInternal _IQRequest_default_instance_;
class IQResult;
struct IQResultDefaultTypeInternal;
extern IQResultDefaultTypeInternal _IQResult_default_instance_;
class PanoramicScanRequest;
struct PanoramicScanRequestDefaultTypeInternal;
extern PanoramicScanRequestDefaultTypeInternal _PanoramicScanRequest_default_instance_;
class PanoramicScanResult;
struct PanoramicScanResultDefaultTypeInternal;
extern PanoramicScanResultDefaultTypeInternal _PanoramicScanResult_default_instance_;
class SignalAnalysisRequest;
struct SignalAnalysisRequestDefaultTypeInternal;
extern SignalAnalysisRequestDefaultTypeInternal _SignalAnalysisRequest_default_instance_;
class SignalAnalysisResult;
struct SignalAnalysisResultDefaultTypeInternal;
extern SignalAnalysisResultDefaultTypeInternal _SignalAnalysisResult_default_instance_;
class SignalAnalysisSpectrum;
struct SignalAnalysisSpectrumDefaultTypeInternal;
extern SignalAnalysisSpectrumDefaultTypeInternal _SignalAnalysisSpectrum_default_instance_;
class SpectrumData;
struct SpectrumDataDefaultTypeInternal;
extern SpectrumDataDefaultTypeInternal _SpectrumData_default_instance_;
class TargetDirection;
struct TargetDirectionDefaultTypeInternal;
extern TargetDirectionDefaultTypeInternal _TargetDirection_default_instance_;
class ThresholdMode;
struct ThresholdModeDefaultTypeInternal;
extern ThresholdModeDefaultTypeInternal _ThresholdMode_default_instance_;
class WorkMode;
struct WorkModeDefaultTypeInternal;
extern WorkModeDefaultTypeInternal _WorkMode_default_instance_;
}  // namespace internal
}  // namespace spatailSpectrum
}  // namespace module
}  // namespace node
}  // namespace dcts
}  // namespace zb
PROTOBUF_NAMESPACE_OPEN
template<> ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::BandParam>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DeviceStatus>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DirectionRequest>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DirectionResult>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DirectionSpectrum>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanRequest>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::DiscreteScanResult>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::IQRequest* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::IQRequest>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::IQResult* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::IQResult>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanRequest>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::PanoramicScanResult>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisRequest>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisResult>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SignalAnalysisSpectrum>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode>(Arena*);
template<> ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* Arena::CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::WorkMode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zb {
namespace dcts {
namespace node {
namespace module {
namespace spatailSpectrum {
namespace internal {

enum DeviceReply_ErrorCode : int {
  DeviceReply_ErrorCode_ERROR_NONE = 0,
  DeviceReply_ErrorCode_ERROR_INTERNAL = 1,
  DeviceReply_ErrorCode_DeviceReply_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceReply_ErrorCode_DeviceReply_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceReply_ErrorCode_IsValid(int value);
constexpr DeviceReply_ErrorCode DeviceReply_ErrorCode_ErrorCode_MIN = DeviceReply_ErrorCode_ERROR_NONE;
constexpr DeviceReply_ErrorCode DeviceReply_ErrorCode_ErrorCode_MAX = DeviceReply_ErrorCode_ERROR_INTERNAL;
constexpr int DeviceReply_ErrorCode_ErrorCode_ARRAYSIZE = DeviceReply_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceReply_ErrorCode_descriptor();
template<typename T>
inline const std::string& DeviceReply_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceReply_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceReply_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceReply_ErrorCode_descriptor(), enum_t_value);
}
inline bool DeviceReply_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DeviceReply_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceReply_ErrorCode>(
    DeviceReply_ErrorCode_descriptor(), name, value);
}
enum ModuleStatus : int {
  ABNORMAL = 0,
  NORMAL = 1,
  ModuleStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ModuleStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ModuleStatus_IsValid(int value);
constexpr ModuleStatus ModuleStatus_MIN = ABNORMAL;
constexpr ModuleStatus ModuleStatus_MAX = NORMAL;
constexpr int ModuleStatus_ARRAYSIZE = ModuleStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ModuleStatus_descriptor();
template<typename T>
inline const std::string& ModuleStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ModuleStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ModuleStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ModuleStatus_descriptor(), enum_t_value);
}
inline bool ModuleStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ModuleStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ModuleStatus>(
    ModuleStatus_descriptor(), name, value);
}
// ===================================================================

class DeviceReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply) */ {
 public:
  inline DeviceReply() : DeviceReply(nullptr) {}
  virtual ~DeviceReply();
  explicit constexpr DeviceReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceReply(const DeviceReply& from);
  DeviceReply(DeviceReply&& from) noexcept
    : DeviceReply() {
    *this = ::std::move(from);
  }

  inline DeviceReply& operator=(const DeviceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceReply& operator=(DeviceReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceReply* internal_default_instance() {
    return reinterpret_cast<const DeviceReply*>(
               &_DeviceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceReply& a, DeviceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceReply* New() const final {
    return CreateMaybeMessage<DeviceReply>(nullptr);
  }

  DeviceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceReply& from);
  void MergeFrom(const DeviceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DeviceReply";
  }
  protected:
  explicit DeviceReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeviceReply_ErrorCode ErrorCode;
  static constexpr ErrorCode ERROR_NONE =
    DeviceReply_ErrorCode_ERROR_NONE;
  static constexpr ErrorCode ERROR_INTERNAL =
    DeviceReply_ErrorCode_ERROR_INTERNAL;
  static inline bool ErrorCode_IsValid(int value) {
    return DeviceReply_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    DeviceReply_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    DeviceReply_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    DeviceReply_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return DeviceReply_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return DeviceReply_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return DeviceReply_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorInfoFieldNumber = 2,
    kErrorCodeFieldNumber = 1,
  };
  // string error_info = 2;
  void clear_error_info();
  const std::string& error_info() const;
  void set_error_info(const std::string& value);
  void set_error_info(std::string&& value);
  void set_error_info(const char* value);
  void set_error_info(const char* value, size_t size);
  std::string* mutable_error_info();
  std::string* release_error_info();
  void set_allocated_error_info(std::string* error_info);
  private:
  const std::string& _internal_error_info() const;
  void _internal_set_error_info(const std::string& value);
  std::string* _internal_mutable_error_info();
  public:

  // .zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.ErrorCode error_code = 1;
  void clear_error_code();
  ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode error_code() const;
  void set_error_code(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode value);
  private:
  ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_info_;
  int error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class WorkMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.WorkMode) */ {
 public:
  inline WorkMode() : WorkMode(nullptr) {}
  virtual ~WorkMode();
  explicit constexpr WorkMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorkMode(const WorkMode& from);
  WorkMode(WorkMode&& from) noexcept
    : WorkMode() {
    *this = ::std::move(from);
  }

  inline WorkMode& operator=(const WorkMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkMode& operator=(WorkMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorkMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkMode* internal_default_instance() {
    return reinterpret_cast<const WorkMode*>(
               &_WorkMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorkMode& a, WorkMode& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorkMode* New() const final {
    return CreateMaybeMessage<WorkMode>(nullptr);
  }

  WorkMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorkMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorkMode& from);
  void MergeFrom(const WorkMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.WorkMode";
  }
  protected:
  explicit WorkMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAntennaModeFieldNumber = 1,
    kReceiveModeFieldNumber = 2,
    kGainFieldNumber = 3,
    kIntervalFieldNumber = 4,
  };
  // int32 antenna_mode = 1;
  void clear_antenna_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_mode() const;
  void set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna_mode() const;
  void _internal_set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 2;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gain = 3;
  void clear_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 gain() const;
  void set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gain() const;
  void _internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 interval = 4;
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.WorkMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class CalibrationParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam) */ {
 public:
  inline CalibrationParam() : CalibrationParam(nullptr) {}
  virtual ~CalibrationParam();
  explicit constexpr CalibrationParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalibrationParam(const CalibrationParam& from);
  CalibrationParam(CalibrationParam&& from) noexcept
    : CalibrationParam() {
    *this = ::std::move(from);
  }

  inline CalibrationParam& operator=(const CalibrationParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalibrationParam& operator=(CalibrationParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CalibrationParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalibrationParam* internal_default_instance() {
    return reinterpret_cast<const CalibrationParam*>(
               &_CalibrationParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CalibrationParam& a, CalibrationParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CalibrationParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalibrationParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CalibrationParam* New() const final {
    return CreateMaybeMessage<CalibrationParam>(nullptr);
  }

  CalibrationParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CalibrationParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CalibrationParam& from);
  void MergeFrom(const CalibrationParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalibrationParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam";
  }
  protected:
  explicit CalibrationParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAntennaModeFieldNumber = 1,
    kGainFieldNumber = 2,
    kDownconverterModeFieldNumber = 3,
    kDownconverterIfAttenuationFieldNumber = 4,
    kReceiveModeFieldNumber = 5,
    kReceiveRfAttenuationFieldNumber = 6,
    kReceiveIfAttenuationFieldNumber = 7,
    kAttenuationModeFieldNumber = 8,
  };
  // int32 antenna_mode = 1;
  void clear_antenna_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_mode() const;
  void set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_antenna_mode() const;
  void _internal_set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gain = 2;
  void clear_gain();
  ::PROTOBUF_NAMESPACE_ID::int32 gain() const;
  void set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gain() const;
  void _internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 downconverter_mode = 3;
  void clear_downconverter_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_mode() const;
  void set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downconverter_mode() const;
  void _internal_set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 downconverter_if_attenuation = 4;
  void clear_downconverter_if_attenuation();
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_if_attenuation() const;
  void set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_downconverter_if_attenuation() const;
  void _internal_set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_mode = 5;
  void clear_receive_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode() const;
  void set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_mode() const;
  void _internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_rf_attenuation = 6;
  void clear_receive_rf_attenuation();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_rf_attenuation() const;
  void set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_rf_attenuation() const;
  void _internal_set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 receive_if_attenuation = 7;
  void clear_receive_if_attenuation();
  ::PROTOBUF_NAMESPACE_ID::int32 receive_if_attenuation() const;
  void set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_receive_if_attenuation() const;
  void _internal_set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 attenuation_mode = 8;
  void clear_attenuation_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_mode() const;
  void set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attenuation_mode() const;
  void _internal_set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 antenna_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 gain_;
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 downconverter_if_attenuation_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_rf_attenuation_;
  ::PROTOBUF_NAMESPACE_ID::int32 receive_if_attenuation_;
  ::PROTOBUF_NAMESPACE_ID::int32 attenuation_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class ThresholdMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode) */ {
 public:
  inline ThresholdMode() : ThresholdMode(nullptr) {}
  virtual ~ThresholdMode();
  explicit constexpr ThresholdMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThresholdMode(const ThresholdMode& from);
  ThresholdMode(ThresholdMode&& from) noexcept
    : ThresholdMode() {
    *this = ::std::move(from);
  }

  inline ThresholdMode& operator=(const ThresholdMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThresholdMode& operator=(ThresholdMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThresholdMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThresholdMode* internal_default_instance() {
    return reinterpret_cast<const ThresholdMode*>(
               &_ThresholdMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ThresholdMode& a, ThresholdMode& b) {
    a.Swap(&b);
  }
  inline void Swap(ThresholdMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThresholdMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThresholdMode* New() const final {
    return CreateMaybeMessage<ThresholdMode>(nullptr);
  }

  ThresholdMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThresholdMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThresholdMode& from);
  void MergeFrom(const ThresholdMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThresholdMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode";
  }
  protected:
  explicit ThresholdMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class BandParam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.BandParam) */ {
 public:
  inline BandParam() : BandParam(nullptr) {}
  virtual ~BandParam();
  explicit constexpr BandParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BandParam(const BandParam& from);
  BandParam(BandParam&& from) noexcept
    : BandParam() {
    *this = ::std::move(from);
  }

  inline BandParam& operator=(const BandParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BandParam& operator=(BandParam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BandParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BandParam* internal_default_instance() {
    return reinterpret_cast<const BandParam*>(
               &_BandParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BandParam& a, BandParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BandParam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BandParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BandParam* New() const final {
    return CreateMaybeMessage<BandParam>(nullptr);
  }

  BandParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BandParam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BandParam& from);
  void MergeFrom(const BandParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BandParam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.BandParam";
  }
  protected:
  explicit BandParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpanFieldNumber = 1,
    kIFBandwidthFieldNumber = 2,
  };
  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  bool has_span() const;
  private:
  bool _internal_has_span() const;
  public:
  void clear_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_span();
  void set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_span();
  public:
  void unsafe_arena_set_allocated_span(
      ::zb::dcts::node::spectrum::FrequencySpan* span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_span();

  // double IF_bandwidth = 2;
  void clear_if_bandwidth();
  double if_bandwidth() const;
  void set_if_bandwidth(double value);
  private:
  double _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(double value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.BandParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::FrequencySpan* span_;
  double if_bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class SpectrumData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData) */ {
 public:
  inline SpectrumData() : SpectrumData(nullptr) {}
  virtual ~SpectrumData();
  explicit constexpr SpectrumData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpectrumData(const SpectrumData& from);
  SpectrumData(SpectrumData&& from) noexcept
    : SpectrumData() {
    *this = ::std::move(from);
  }

  inline SpectrumData& operator=(const SpectrumData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpectrumData& operator=(SpectrumData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpectrumData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpectrumData* internal_default_instance() {
    return reinterpret_cast<const SpectrumData*>(
               &_SpectrumData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SpectrumData& a, SpectrumData& b) {
    a.Swap(&b);
  }
  inline void Swap(SpectrumData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpectrumData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpectrumData* New() const final {
    return CreateMaybeMessage<SpectrumData>(nullptr);
  }

  SpectrumData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpectrumData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpectrumData& from);
  void MergeFrom(const SpectrumData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpectrumData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.SpectrumData";
  }
  protected:
  explicit SpectrumData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplitudeFieldNumber = 2,
    kSpanFieldNumber = 1,
  };
  // repeated float amplitude = 2;
  int amplitude_size() const;
  private:
  int _internal_amplitude_size() const;
  public:
  void clear_amplitude();
  private:
  float _internal_amplitude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_amplitude() const;
  void _internal_add_amplitude(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_amplitude();
  public:
  float amplitude(int index) const;
  void set_amplitude(int index, float value);
  void add_amplitude(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      amplitude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_amplitude();

  // .zb.dcts.node.spectrum.FrequencySpan span = 1;
  bool has_span() const;
  private:
  bool _internal_has_span() const;
  public:
  void clear_span();
  const ::zb::dcts::node::spectrum::FrequencySpan& span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* release_span();
  ::zb::dcts::node::spectrum::FrequencySpan* mutable_span();
  void set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span);
  private:
  const ::zb::dcts::node::spectrum::FrequencySpan& _internal_span() const;
  ::zb::dcts::node::spectrum::FrequencySpan* _internal_mutable_span();
  public:
  void unsafe_arena_set_allocated_span(
      ::zb::dcts::node::spectrum::FrequencySpan* span);
  ::zb::dcts::node::spectrum::FrequencySpan* unsafe_arena_release_span();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > amplitude_;
  mutable std::atomic<int> _amplitude_cached_byte_size_;
  ::zb::dcts::node::spectrum::FrequencySpan* span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class PanoramicScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest) */ {
 public:
  inline PanoramicScanRequest() : PanoramicScanRequest(nullptr) {}
  virtual ~PanoramicScanRequest();
  explicit constexpr PanoramicScanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PanoramicScanRequest(const PanoramicScanRequest& from);
  PanoramicScanRequest(PanoramicScanRequest&& from) noexcept
    : PanoramicScanRequest() {
    *this = ::std::move(from);
  }

  inline PanoramicScanRequest& operator=(const PanoramicScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PanoramicScanRequest& operator=(PanoramicScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PanoramicScanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PanoramicScanRequest* internal_default_instance() {
    return reinterpret_cast<const PanoramicScanRequest*>(
               &_PanoramicScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PanoramicScanRequest& a, PanoramicScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PanoramicScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PanoramicScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PanoramicScanRequest* New() const final {
    return CreateMaybeMessage<PanoramicScanRequest>(nullptr);
  }

  PanoramicScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PanoramicScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PanoramicScanRequest& from);
  void MergeFrom(const PanoramicScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PanoramicScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest";
  }
  protected:
  explicit PanoramicScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkModeFieldNumber = 1,
    kBandParamFieldNumber = 2,
    kCalibrationParamFieldNumber = 3,
    kScanTypeFieldNumber = 4,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  bool has_work_mode() const;
  private:
  bool _internal_has_work_mode() const;
  public:
  void clear_work_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* release_work_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* mutable_work_mode();
  void set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& _internal_work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* _internal_mutable_work_mode();
  public:
  void unsafe_arena_set_allocated_work_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* unsafe_arena_release_work_mode();

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  bool has_band_param() const;
  private:
  bool _internal_has_band_param() const;
  public:
  void clear_band_param();
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* release_band_param();
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* mutable_band_param();
  void set_allocated_band_param(::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& _internal_band_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* _internal_mutable_band_param();
  public:
  void unsafe_arena_set_allocated_band_param(
      ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param);
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* unsafe_arena_release_band_param();

  // .zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam calibration_param = 3;
  bool has_calibration_param() const;
  private:
  bool _internal_has_calibration_param() const;
  public:
  void clear_calibration_param();
  const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam& calibration_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* release_calibration_param();
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* mutable_calibration_param();
  void set_allocated_calibration_param(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* calibration_param);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam& _internal_calibration_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* _internal_mutable_calibration_param();
  public:
  void unsafe_arena_set_allocated_calibration_param(
      ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* calibration_param);
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* unsafe_arena_release_calibration_param();

  // int32 scan_type = 4;
  void clear_scan_type();
  ::PROTOBUF_NAMESPACE_ID::int32 scan_type() const;
  void set_scan_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scan_type() const;
  void _internal_set_scan_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode_;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param_;
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* calibration_param_;
  ::PROTOBUF_NAMESPACE_ID::int32 scan_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class PanoramicScanResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult) */ {
 public:
  inline PanoramicScanResult() : PanoramicScanResult(nullptr) {}
  virtual ~PanoramicScanResult();
  explicit constexpr PanoramicScanResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PanoramicScanResult(const PanoramicScanResult& from);
  PanoramicScanResult(PanoramicScanResult&& from) noexcept
    : PanoramicScanResult() {
    *this = ::std::move(from);
  }

  inline PanoramicScanResult& operator=(const PanoramicScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline PanoramicScanResult& operator=(PanoramicScanResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PanoramicScanResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const PanoramicScanResult* internal_default_instance() {
    return reinterpret_cast<const PanoramicScanResult*>(
               &_PanoramicScanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PanoramicScanResult& a, PanoramicScanResult& b) {
    a.Swap(&b);
  }
  inline void Swap(PanoramicScanResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PanoramicScanResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PanoramicScanResult* New() const final {
    return CreateMaybeMessage<PanoramicScanResult>(nullptr);
  }

  PanoramicScanResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PanoramicScanResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PanoramicScanResult& from);
  void MergeFrom(const PanoramicScanResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PanoramicScanResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult";
  }
  protected:
  explicit PanoramicScanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumFieldNumber = 1,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  bool has_spectrum() const;
  private:
  bool _internal_has_spectrum() const;
  public:
  void clear_spectrum();
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* release_spectrum();
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* mutable_spectrum();
  void set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& _internal_spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* _internal_mutable_spectrum();
  public:
  void unsafe_arena_set_allocated_spectrum(
      ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* unsafe_arena_release_spectrum();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class DiscreteScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest) */ {
 public:
  inline DiscreteScanRequest() : DiscreteScanRequest(nullptr) {}
  virtual ~DiscreteScanRequest();
  explicit constexpr DiscreteScanRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteScanRequest(const DiscreteScanRequest& from);
  DiscreteScanRequest(DiscreteScanRequest&& from) noexcept
    : DiscreteScanRequest() {
    *this = ::std::move(from);
  }

  inline DiscreteScanRequest& operator=(const DiscreteScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteScanRequest& operator=(DiscreteScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscreteScanRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteScanRequest* internal_default_instance() {
    return reinterpret_cast<const DiscreteScanRequest*>(
               &_DiscreteScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DiscreteScanRequest& a, DiscreteScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscreteScanRequest* New() const final {
    return CreateMaybeMessage<DiscreteScanRequest>(nullptr);
  }

  DiscreteScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscreteScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscreteScanRequest& from);
  void MergeFrom(const DiscreteScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest";
  }
  protected:
  explicit DiscreteScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBandParamFieldNumber = 2,
    kWorkModeFieldNumber = 1,
  };
  // repeated .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  int band_param_size() const;
  private:
  int _internal_band_param_size() const;
  public:
  void clear_band_param();
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* mutable_band_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam >*
      mutable_band_param();
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& _internal_band_param(int index) const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* _internal_add_band_param();
  public:
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param(int index) const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* add_band_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam >&
      band_param() const;

  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  bool has_work_mode() const;
  private:
  bool _internal_has_work_mode() const;
  public:
  void clear_work_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* release_work_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* mutable_work_mode();
  void set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& _internal_work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* _internal_mutable_work_mode();
  public:
  void unsafe_arena_set_allocated_work_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* unsafe_arena_release_work_mode();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam > band_param_;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class DiscreteScanResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult) */ {
 public:
  inline DiscreteScanResult() : DiscreteScanResult(nullptr) {}
  virtual ~DiscreteScanResult();
  explicit constexpr DiscreteScanResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscreteScanResult(const DiscreteScanResult& from);
  DiscreteScanResult(DiscreteScanResult&& from) noexcept
    : DiscreteScanResult() {
    *this = ::std::move(from);
  }

  inline DiscreteScanResult& operator=(const DiscreteScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscreteScanResult& operator=(DiscreteScanResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DiscreteScanResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscreteScanResult* internal_default_instance() {
    return reinterpret_cast<const DiscreteScanResult*>(
               &_DiscreteScanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DiscreteScanResult& a, DiscreteScanResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscreteScanResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscreteScanResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscreteScanResult* New() const final {
    return CreateMaybeMessage<DiscreteScanResult>(nullptr);
  }

  DiscreteScanResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscreteScanResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DiscreteScanResult& from);
  void MergeFrom(const DiscreteScanResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscreteScanResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult";
  }
  protected:
  explicit DiscreteScanResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumFieldNumber = 2,
    kBandIndexFieldNumber = 1,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 2;
  bool has_spectrum() const;
  private:
  bool _internal_has_spectrum() const;
  public:
  void clear_spectrum();
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* release_spectrum();
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* mutable_spectrum();
  void set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& _internal_spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* _internal_mutable_spectrum();
  public:
  void unsafe_arena_set_allocated_spectrum(
      ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* unsafe_arena_release_spectrum();

  // int32 band_index = 1;
  void clear_band_index();
  ::PROTOBUF_NAMESPACE_ID::int32 band_index() const;
  void set_band_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_band_index() const;
  void _internal_set_band_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum_;
  ::PROTOBUF_NAMESPACE_ID::int32 band_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class DirectionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest) */ {
 public:
  inline DirectionRequest() : DirectionRequest(nullptr) {}
  virtual ~DirectionRequest();
  explicit constexpr DirectionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectionRequest(const DirectionRequest& from);
  DirectionRequest(DirectionRequest&& from) noexcept
    : DirectionRequest() {
    *this = ::std::move(from);
  }

  inline DirectionRequest& operator=(const DirectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionRequest& operator=(DirectionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectionRequest* internal_default_instance() {
    return reinterpret_cast<const DirectionRequest*>(
               &_DirectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DirectionRequest& a, DirectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionRequest* New() const final {
    return CreateMaybeMessage<DirectionRequest>(nullptr);
  }

  DirectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionRequest& from);
  void MergeFrom(const DirectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest";
  }
  protected:
  explicit DirectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkModeFieldNumber = 1,
    kThresholdModeFieldNumber = 5,
    kCenterFreqFieldNumber = 2,
    kIfBandwidthFieldNumber = 3,
    kDfBandwidthFieldNumber = 4,
    kTargetCountFieldNumber = 6,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  bool has_work_mode() const;
  private:
  bool _internal_has_work_mode() const;
  public:
  void clear_work_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* release_work_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* mutable_work_mode();
  void set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& _internal_work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* _internal_mutable_work_mode();
  public:
  void unsafe_arena_set_allocated_work_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* unsafe_arena_release_work_mode();

  // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 5;
  bool has_threshold_mode() const;
  private:
  bool _internal_has_threshold_mode() const;
  public:
  void clear_threshold_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& threshold_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* release_threshold_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* mutable_threshold_mode();
  void set_allocated_threshold_mode(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& _internal_threshold_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* _internal_mutable_threshold_mode();
  public:
  void unsafe_arena_set_allocated_threshold_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* unsafe_arena_release_threshold_mode();

  // double center_freq = 2;
  void clear_center_freq();
  double center_freq() const;
  void set_center_freq(double value);
  private:
  double _internal_center_freq() const;
  void _internal_set_center_freq(double value);
  public:

  // double if_bandwidth = 3;
  void clear_if_bandwidth();
  double if_bandwidth() const;
  void set_if_bandwidth(double value);
  private:
  double _internal_if_bandwidth() const;
  void _internal_set_if_bandwidth(double value);
  public:

  // double df_bandwidth = 4;
  void clear_df_bandwidth();
  double df_bandwidth() const;
  void set_df_bandwidth(double value);
  private:
  double _internal_df_bandwidth() const;
  void _internal_set_df_bandwidth(double value);
  public:

  // int32 target_count = 6;
  void clear_target_count();
  ::PROTOBUF_NAMESPACE_ID::int32 target_count() const;
  void set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_count() const;
  void _internal_set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode_;
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode_;
  double center_freq_;
  double if_bandwidth_;
  double df_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class TargetDirection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection) */ {
 public:
  inline TargetDirection() : TargetDirection(nullptr) {}
  virtual ~TargetDirection();
  explicit constexpr TargetDirection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetDirection(const TargetDirection& from);
  TargetDirection(TargetDirection&& from) noexcept
    : TargetDirection() {
    *this = ::std::move(from);
  }

  inline TargetDirection& operator=(const TargetDirection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetDirection& operator=(TargetDirection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TargetDirection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetDirection* internal_default_instance() {
    return reinterpret_cast<const TargetDirection*>(
               &_TargetDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TargetDirection& a, TargetDirection& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetDirection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetDirection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TargetDirection* New() const final {
    return CreateMaybeMessage<TargetDirection>(nullptr);
  }

  TargetDirection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TargetDirection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TargetDirection& from);
  void MergeFrom(const TargetDirection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetDirection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.TargetDirection";
  }
  protected:
  explicit TargetDirection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFrequencyFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kConfidenceFieldNumber = 3,
    kAmplitudeFieldNumber = 4,
  };
  // double center_frequency = 1;
  void clear_center_frequency();
  double center_frequency() const;
  void set_center_frequency(double value);
  private:
  double _internal_center_frequency() const;
  void _internal_set_center_frequency(double value);
  public:

  // double direction = 2;
  void clear_direction();
  double direction() const;
  void set_direction(double value);
  private:
  double _internal_direction() const;
  void _internal_set_direction(double value);
  public:

  // int32 confidence = 3;
  void clear_confidence();
  ::PROTOBUF_NAMESPACE_ID::int32 confidence() const;
  void set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confidence() const;
  void _internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float amplitude = 4;
  void clear_amplitude();
  float amplitude() const;
  void set_amplitude(float value);
  private:
  float _internal_amplitude() const;
  void _internal_set_amplitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double center_frequency_;
  double direction_;
  ::PROTOBUF_NAMESPACE_ID::int32 confidence_;
  float amplitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class DirectionResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult) */ {
 public:
  inline DirectionResult() : DirectionResult(nullptr) {}
  virtual ~DirectionResult();
  explicit constexpr DirectionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectionResult(const DirectionResult& from);
  DirectionResult(DirectionResult&& from) noexcept
    : DirectionResult() {
    *this = ::std::move(from);
  }

  inline DirectionResult& operator=(const DirectionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionResult& operator=(DirectionResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectionResult* internal_default_instance() {
    return reinterpret_cast<const DirectionResult*>(
               &_DirectionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DirectionResult& a, DirectionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionResult* New() const final {
    return CreateMaybeMessage<DirectionResult>(nullptr);
  }

  DirectionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionResult& from);
  void MergeFrom(const DirectionResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DirectionResult";
  }
  protected:
  explicit DirectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetDetectionFieldNumber = 1,
  };
  // repeated .zb.dcts.node.module.spatailSpectrum.internal.TargetDirection target_detection = 1;
  int target_detection_size() const;
  private:
  int _internal_target_detection_size() const;
  public:
  void clear_target_detection();
  ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* mutable_target_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection >*
      mutable_target_detection();
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection& _internal_target_detection(int index) const;
  ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* _internal_add_target_detection();
  public:
  const ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection& target_detection(int index) const;
  ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* add_target_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection >&
      target_detection() const;

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection > target_detection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class DirectionSpectrum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum) */ {
 public:
  inline DirectionSpectrum() : DirectionSpectrum(nullptr) {}
  virtual ~DirectionSpectrum();
  explicit constexpr DirectionSpectrum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DirectionSpectrum(const DirectionSpectrum& from);
  DirectionSpectrum(DirectionSpectrum&& from) noexcept
    : DirectionSpectrum() {
    *this = ::std::move(from);
  }

  inline DirectionSpectrum& operator=(const DirectionSpectrum& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectionSpectrum& operator=(DirectionSpectrum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DirectionSpectrum& default_instance() {
    return *internal_default_instance();
  }
  static inline const DirectionSpectrum* internal_default_instance() {
    return reinterpret_cast<const DirectionSpectrum*>(
               &_DirectionSpectrum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DirectionSpectrum& a, DirectionSpectrum& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectionSpectrum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DirectionSpectrum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectionSpectrum* New() const final {
    return CreateMaybeMessage<DirectionSpectrum>(nullptr);
  }

  DirectionSpectrum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectionSpectrum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DirectionSpectrum& from);
  void MergeFrom(const DirectionSpectrum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DirectionSpectrum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum";
  }
  protected:
  explicit DirectionSpectrum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumFieldNumber = 1,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  bool has_spectrum() const;
  private:
  bool _internal_has_spectrum() const;
  public:
  void clear_spectrum();
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* release_spectrum();
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* mutable_spectrum();
  void set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& _internal_spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* _internal_mutable_spectrum();
  public:
  void unsafe_arena_set_allocated_spectrum(
      ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* unsafe_arena_release_spectrum();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class SignalAnalysisRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest) */ {
 public:
  inline SignalAnalysisRequest() : SignalAnalysisRequest(nullptr) {}
  virtual ~SignalAnalysisRequest();
  explicit constexpr SignalAnalysisRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalAnalysisRequest(const SignalAnalysisRequest& from);
  SignalAnalysisRequest(SignalAnalysisRequest&& from) noexcept
    : SignalAnalysisRequest() {
    *this = ::std::move(from);
  }

  inline SignalAnalysisRequest& operator=(const SignalAnalysisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalAnalysisRequest& operator=(SignalAnalysisRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalAnalysisRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalAnalysisRequest* internal_default_instance() {
    return reinterpret_cast<const SignalAnalysisRequest*>(
               &_SignalAnalysisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SignalAnalysisRequest& a, SignalAnalysisRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalAnalysisRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalAnalysisRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalAnalysisRequest* New() const final {
    return CreateMaybeMessage<SignalAnalysisRequest>(nullptr);
  }

  SignalAnalysisRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalAnalysisRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalAnalysisRequest& from);
  void MergeFrom(const SignalAnalysisRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalAnalysisRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest";
  }
  protected:
  explicit SignalAnalysisRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkModeFieldNumber = 1,
    kBandParamFieldNumber = 2,
    kThresholdModeFieldNumber = 3,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  bool has_work_mode() const;
  private:
  bool _internal_has_work_mode() const;
  public:
  void clear_work_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* release_work_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* mutable_work_mode();
  void set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& _internal_work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* _internal_mutable_work_mode();
  public:
  void unsafe_arena_set_allocated_work_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* unsafe_arena_release_work_mode();

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  bool has_band_param() const;
  private:
  bool _internal_has_band_param() const;
  public:
  void clear_band_param();
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* release_band_param();
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* mutable_band_param();
  void set_allocated_band_param(::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& _internal_band_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* _internal_mutable_band_param();
  public:
  void unsafe_arena_set_allocated_band_param(
      ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param);
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* unsafe_arena_release_band_param();

  // .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 3;
  bool has_threshold_mode() const;
  private:
  bool _internal_has_threshold_mode() const;
  public:
  void clear_threshold_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& threshold_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* release_threshold_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* mutable_threshold_mode();
  void set_allocated_threshold_mode(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& _internal_threshold_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* _internal_mutable_threshold_mode();
  public:
  void unsafe_arena_set_allocated_threshold_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* unsafe_arena_release_threshold_mode();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode_;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param_;
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class SignalAnalysisResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult) */ {
 public:
  inline SignalAnalysisResult() : SignalAnalysisResult(nullptr) {}
  virtual ~SignalAnalysisResult();
  explicit constexpr SignalAnalysisResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalAnalysisResult(const SignalAnalysisResult& from);
  SignalAnalysisResult(SignalAnalysisResult&& from) noexcept
    : SignalAnalysisResult() {
    *this = ::std::move(from);
  }

  inline SignalAnalysisResult& operator=(const SignalAnalysisResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalAnalysisResult& operator=(SignalAnalysisResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalAnalysisResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalAnalysisResult* internal_default_instance() {
    return reinterpret_cast<const SignalAnalysisResult*>(
               &_SignalAnalysisResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SignalAnalysisResult& a, SignalAnalysisResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalAnalysisResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalAnalysisResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalAnalysisResult* New() const final {
    return CreateMaybeMessage<SignalAnalysisResult>(nullptr);
  }

  SignalAnalysisResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalAnalysisResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalAnalysisResult& from);
  void MergeFrom(const SignalAnalysisResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalAnalysisResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult";
  }
  protected:
  explicit SignalAnalysisResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalBandFieldNumber = 1,
    kModulationTypeFieldNumber = 2,
    kAmplitudeFieldNumber = 3,
  };
  // .zb.dcts.node.spectrum.SignalBand signal_band = 1;
  bool has_signal_band() const;
  private:
  bool _internal_has_signal_band() const;
  public:
  void clear_signal_band();
  const ::zb::dcts::node::spectrum::SignalBand& signal_band() const;
  ::zb::dcts::node::spectrum::SignalBand* release_signal_band();
  ::zb::dcts::node::spectrum::SignalBand* mutable_signal_band();
  void set_allocated_signal_band(::zb::dcts::node::spectrum::SignalBand* signal_band);
  private:
  const ::zb::dcts::node::spectrum::SignalBand& _internal_signal_band() const;
  ::zb::dcts::node::spectrum::SignalBand* _internal_mutable_signal_band();
  public:
  void unsafe_arena_set_allocated_signal_band(
      ::zb::dcts::node::spectrum::SignalBand* signal_band);
  ::zb::dcts::node::spectrum::SignalBand* unsafe_arena_release_signal_band();

  // .zb.dcts.node.modulation.ModType modulation_type = 2;
  void clear_modulation_type();
  ::zb::dcts::node::modulation::ModType modulation_type() const;
  void set_modulation_type(::zb::dcts::node::modulation::ModType value);
  private:
  ::zb::dcts::node::modulation::ModType _internal_modulation_type() const;
  void _internal_set_modulation_type(::zb::dcts::node::modulation::ModType value);
  public:

  // float amplitude = 3;
  void clear_amplitude();
  float amplitude() const;
  void set_amplitude(float value);
  private:
  float _internal_amplitude() const;
  void _internal_set_amplitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::spectrum::SignalBand* signal_band_;
  int modulation_type_;
  float amplitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class SignalAnalysisSpectrum PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum) */ {
 public:
  inline SignalAnalysisSpectrum() : SignalAnalysisSpectrum(nullptr) {}
  virtual ~SignalAnalysisSpectrum();
  explicit constexpr SignalAnalysisSpectrum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignalAnalysisSpectrum(const SignalAnalysisSpectrum& from);
  SignalAnalysisSpectrum(SignalAnalysisSpectrum&& from) noexcept
    : SignalAnalysisSpectrum() {
    *this = ::std::move(from);
  }

  inline SignalAnalysisSpectrum& operator=(const SignalAnalysisSpectrum& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignalAnalysisSpectrum& operator=(SignalAnalysisSpectrum&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignalAnalysisSpectrum& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignalAnalysisSpectrum* internal_default_instance() {
    return reinterpret_cast<const SignalAnalysisSpectrum*>(
               &_SignalAnalysisSpectrum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SignalAnalysisSpectrum& a, SignalAnalysisSpectrum& b) {
    a.Swap(&b);
  }
  inline void Swap(SignalAnalysisSpectrum* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignalAnalysisSpectrum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignalAnalysisSpectrum* New() const final {
    return CreateMaybeMessage<SignalAnalysisSpectrum>(nullptr);
  }

  SignalAnalysisSpectrum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignalAnalysisSpectrum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignalAnalysisSpectrum& from);
  void MergeFrom(const SignalAnalysisSpectrum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignalAnalysisSpectrum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum";
  }
  protected:
  explicit SignalAnalysisSpectrum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectrumFieldNumber = 1,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
  bool has_spectrum() const;
  private:
  bool _internal_has_spectrum() const;
  public:
  void clear_spectrum();
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* release_spectrum();
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* mutable_spectrum();
  void set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& _internal_spectrum() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* _internal_mutable_spectrum();
  public:
  void unsafe_arena_set_allocated_spectrum(
      ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum);
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* unsafe_arena_release_spectrum();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class IQRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.IQRequest) */ {
 public:
  inline IQRequest() : IQRequest(nullptr) {}
  virtual ~IQRequest();
  explicit constexpr IQRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IQRequest(const IQRequest& from);
  IQRequest(IQRequest&& from) noexcept
    : IQRequest() {
    *this = ::std::move(from);
  }

  inline IQRequest& operator=(const IQRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IQRequest& operator=(IQRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IQRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IQRequest* internal_default_instance() {
    return reinterpret_cast<const IQRequest*>(
               &_IQRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(IQRequest& a, IQRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IQRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IQRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IQRequest* New() const final {
    return CreateMaybeMessage<IQRequest>(nullptr);
  }

  IQRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IQRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IQRequest& from);
  void MergeFrom(const IQRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IQRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.IQRequest";
  }
  protected:
  explicit IQRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkModeFieldNumber = 1,
    kBandParamFieldNumber = 2,
    kPointsFieldNumber = 3,
  };
  // .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
  bool has_work_mode() const;
  private:
  bool _internal_has_work_mode() const;
  public:
  void clear_work_mode();
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* release_work_mode();
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* mutable_work_mode();
  void set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& _internal_work_mode() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* _internal_mutable_work_mode();
  public:
  void unsafe_arena_set_allocated_work_mode(
      ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode);
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* unsafe_arena_release_work_mode();

  // .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
  bool has_band_param() const;
  private:
  bool _internal_has_band_param() const;
  public:
  void clear_band_param();
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& band_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* release_band_param();
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* mutable_band_param();
  void set_allocated_band_param(::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param);
  private:
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& _internal_band_param() const;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* _internal_mutable_band_param();
  public:
  void unsafe_arena_set_allocated_band_param(
      ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param);
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* unsafe_arena_release_band_param();

  // uint32 points = 3;
  void clear_points();
  ::PROTOBUF_NAMESPACE_ID::uint32 points() const;
  void set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_points() const;
  void _internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.IQRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode_;
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class IQResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.IQResult) */ {
 public:
  inline IQResult() : IQResult(nullptr) {}
  virtual ~IQResult();
  explicit constexpr IQResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IQResult(const IQResult& from);
  IQResult(IQResult&& from) noexcept
    : IQResult() {
    *this = ::std::move(from);
  }

  inline IQResult& operator=(const IQResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline IQResult& operator=(IQResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IQResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const IQResult* internal_default_instance() {
    return reinterpret_cast<const IQResult*>(
               &_IQResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(IQResult& a, IQResult& b) {
    a.Swap(&b);
  }
  inline void Swap(IQResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IQResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IQResult* New() const final {
    return CreateMaybeMessage<IQResult>(nullptr);
  }

  IQResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IQResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IQResult& from);
  void MergeFrom(const IQResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IQResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.IQResult";
  }
  protected:
  explicit IQResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kBaseBandFieldNumber = 1,
  };
  // repeated float data = 4;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  float _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_data() const;
  void _internal_add_data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_data();
  public:
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // .zb.dcts.node.spectrum.BaseBand base_band = 1;
  bool has_base_band() const;
  private:
  bool _internal_has_base_band() const;
  public:
  void clear_base_band();
  const ::zb::dcts::node::spectrum::BaseBand& base_band() const;
  ::zb::dcts::node::spectrum::BaseBand* release_base_band();
  ::zb::dcts::node::spectrum::BaseBand* mutable_base_band();
  void set_allocated_base_band(::zb::dcts::node::spectrum::BaseBand* base_band);
  private:
  const ::zb::dcts::node::spectrum::BaseBand& _internal_base_band() const;
  ::zb::dcts::node::spectrum::BaseBand* _internal_mutable_base_band();
  public:
  void unsafe_arena_set_allocated_base_band(
      ::zb::dcts::node::spectrum::BaseBand* base_band);
  ::zb::dcts::node::spectrum::BaseBand* unsafe_arena_release_base_band();

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.IQResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  ::zb::dcts::node::spectrum::BaseBand* base_band_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus) */ {
 public:
  inline DeviceStatus() : DeviceStatus(nullptr) {}
  virtual ~DeviceStatus();
  explicit constexpr DeviceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceStatus(const DeviceStatus& from);
  DeviceStatus(DeviceStatus&& from) noexcept
    : DeviceStatus() {
    *this = ::std::move(from);
  }

  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
               &_DeviceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeviceStatus& a, DeviceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceStatus* New() const final {
    return CreateMaybeMessage<DeviceStatus>(nullptr);
  }

  DeviceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceStatus& from);
  void MergeFrom(const DeviceStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus";
  }
  protected:
  explicit DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_node_2fmodule_2fspatialSpectrumInternal_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedFieldNumber = 1,
    kProcessorTemperatureFieldNumber = 2,
    kProcessorStatusFieldNumber = 3,
    kReceiverTemperatureFieldNumber = 4,
    kReceiverStatusFieldNumber = 5,
    kMainctlKernelTempFieldNumber = 6,
    kMainctlTemperatureFieldNumber = 7,
    kMainctlHumidityFieldNumber = 8,
    kMainctlVccinFieldNumber = 9,
    kMainctlStatusFieldNumber = 10,
  };
  // bool connected = 1;
  void clear_connected();
  bool connected() const;
  void set_connected(bool value);
  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);
  public:

  // float processor_temperature = 2;
  void clear_processor_temperature();
  float processor_temperature() const;
  void set_processor_temperature(float value);
  private:
  float _internal_processor_temperature() const;
  void _internal_set_processor_temperature(float value);
  public:

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus processor_status = 3;
  void clear_processor_status();
  ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus processor_status() const;
  void set_processor_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value);
  private:
  ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus _internal_processor_status() const;
  void _internal_set_processor_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value);
  public:

  // float receiver_temperature = 4;
  void clear_receiver_temperature();
  float receiver_temperature() const;
  void set_receiver_temperature(float value);
  private:
  float _internal_receiver_temperature() const;
  void _internal_set_receiver_temperature(float value);
  public:

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus receiver_status = 5;
  void clear_receiver_status();
  ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus receiver_status() const;
  void set_receiver_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value);
  private:
  ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus _internal_receiver_status() const;
  void _internal_set_receiver_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value);
  public:

  // float mainctl_kernel_temp = 6;
  void clear_mainctl_kernel_temp();
  float mainctl_kernel_temp() const;
  void set_mainctl_kernel_temp(float value);
  private:
  float _internal_mainctl_kernel_temp() const;
  void _internal_set_mainctl_kernel_temp(float value);
  public:

  // float mainctl_temperature = 7;
  void clear_mainctl_temperature();
  float mainctl_temperature() const;
  void set_mainctl_temperature(float value);
  private:
  float _internal_mainctl_temperature() const;
  void _internal_set_mainctl_temperature(float value);
  public:

  // float mainctl_humidity = 8;
  void clear_mainctl_humidity();
  float mainctl_humidity() const;
  void set_mainctl_humidity(float value);
  private:
  float _internal_mainctl_humidity() const;
  void _internal_set_mainctl_humidity(float value);
  public:

  // float mainctl_vccin = 9;
  void clear_mainctl_vccin();
  float mainctl_vccin() const;
  void set_mainctl_vccin(float value);
  private:
  float _internal_mainctl_vccin() const;
  void _internal_set_mainctl_vccin(float value);
  public:

  // .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus mainctl_status = 10;
  void clear_mainctl_status();
  ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus mainctl_status() const;
  void set_mainctl_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value);
  private:
  ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus _internal_mainctl_status() const;
  void _internal_set_mainctl_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value);
  public:

  // @@protoc_insertion_point(class_scope:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool connected_;
  float processor_temperature_;
  int processor_status_;
  float receiver_temperature_;
  int receiver_status_;
  float mainctl_kernel_temp_;
  float mainctl_temperature_;
  float mainctl_humidity_;
  float mainctl_vccin_;
  int mainctl_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2fmodule_2fspatialSpectrumInternal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceReply

// .zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.ErrorCode error_code = 1;
inline void DeviceReply::clear_error_code() {
  error_code_ = 0;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode DeviceReply::_internal_error_code() const {
  return static_cast< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode >(error_code_);
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode DeviceReply::error_code() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_code)
  return _internal_error_code();
}
inline void DeviceReply::_internal_set_error_code(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode value) {
  
  error_code_ = value;
}
inline void DeviceReply::set_error_code(::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_code)
}

// string error_info = 2;
inline void DeviceReply::clear_error_info() {
  error_info_.ClearToEmpty();
}
inline const std::string& DeviceReply::error_info() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
  return _internal_error_info();
}
inline void DeviceReply::set_error_info(const std::string& value) {
  _internal_set_error_info(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
}
inline std::string* DeviceReply::mutable_error_info() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
  return _internal_mutable_error_info();
}
inline const std::string& DeviceReply::_internal_error_info() const {
  return error_info_.Get();
}
inline void DeviceReply::_internal_set_error_info(const std::string& value) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeviceReply::set_error_info(std::string&& value) {
  
  error_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
}
inline void DeviceReply::set_error_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
}
inline void DeviceReply::set_error_info(const char* value,
    size_t size) {
  
  error_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
}
inline std::string* DeviceReply::_internal_mutable_error_info() {
  
  return error_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeviceReply::release_error_info() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
  return error_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceReply::set_allocated_error_info(std::string* error_info) {
  if (error_info != nullptr) {
    
  } else {
    
  }
  error_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DeviceReply.error_info)
}

// -------------------------------------------------------------------

// WorkMode

// int32 antenna_mode = 1;
inline void WorkMode::clear_antenna_mode() {
  antenna_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::_internal_antenna_mode() const {
  return antenna_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::antenna_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.antenna_mode)
  return _internal_antenna_mode();
}
inline void WorkMode::_internal_set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_mode_ = value;
}
inline void WorkMode::set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.antenna_mode)
}

// int32 receive_mode = 2;
inline void WorkMode::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.receive_mode)
  return _internal_receive_mode();
}
inline void WorkMode::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void WorkMode::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.receive_mode)
}

// int32 gain = 3;
inline void WorkMode::clear_gain() {
  gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::_internal_gain() const {
  return gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.gain)
  return _internal_gain();
}
inline void WorkMode::_internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gain_ = value;
}
inline void WorkMode::set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.gain)
}

// int32 interval = 4;
inline void WorkMode::clear_interval() {
  interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorkMode::interval() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.interval)
  return _internal_interval();
}
inline void WorkMode::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  interval_ = value;
}
inline void WorkMode::set_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.WorkMode.interval)
}

// -------------------------------------------------------------------

// CalibrationParam

// int32 antenna_mode = 1;
inline void CalibrationParam::clear_antenna_mode() {
  antenna_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_antenna_mode() const {
  return antenna_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::antenna_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.antenna_mode)
  return _internal_antenna_mode();
}
inline void CalibrationParam::_internal_set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  antenna_mode_ = value;
}
inline void CalibrationParam::set_antenna_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_antenna_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.antenna_mode)
}

// int32 gain = 2;
inline void CalibrationParam::clear_gain() {
  gain_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_gain() const {
  return gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::gain() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.gain)
  return _internal_gain();
}
inline void CalibrationParam::_internal_set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gain_ = value;
}
inline void CalibrationParam::set_gain(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.gain)
}

// int32 downconverter_mode = 3;
inline void CalibrationParam::clear_downconverter_mode() {
  downconverter_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_downconverter_mode() const {
  return downconverter_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::downconverter_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.downconverter_mode)
  return _internal_downconverter_mode();
}
inline void CalibrationParam::_internal_set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  downconverter_mode_ = value;
}
inline void CalibrationParam::set_downconverter_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downconverter_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.downconverter_mode)
}

// int32 downconverter_if_attenuation = 4;
inline void CalibrationParam::clear_downconverter_if_attenuation() {
  downconverter_if_attenuation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_downconverter_if_attenuation() const {
  return downconverter_if_attenuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::downconverter_if_attenuation() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.downconverter_if_attenuation)
  return _internal_downconverter_if_attenuation();
}
inline void CalibrationParam::_internal_set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  downconverter_if_attenuation_ = value;
}
inline void CalibrationParam::set_downconverter_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_downconverter_if_attenuation(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.downconverter_if_attenuation)
}

// int32 receive_mode = 5;
inline void CalibrationParam::clear_receive_mode() {
  receive_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_receive_mode() const {
  return receive_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::receive_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.receive_mode)
  return _internal_receive_mode();
}
inline void CalibrationParam::_internal_set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_mode_ = value;
}
inline void CalibrationParam::set_receive_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.receive_mode)
}

// int32 receive_rf_attenuation = 6;
inline void CalibrationParam::clear_receive_rf_attenuation() {
  receive_rf_attenuation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_receive_rf_attenuation() const {
  return receive_rf_attenuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::receive_rf_attenuation() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.receive_rf_attenuation)
  return _internal_receive_rf_attenuation();
}
inline void CalibrationParam::_internal_set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_rf_attenuation_ = value;
}
inline void CalibrationParam::set_receive_rf_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_rf_attenuation(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.receive_rf_attenuation)
}

// int32 receive_if_attenuation = 7;
inline void CalibrationParam::clear_receive_if_attenuation() {
  receive_if_attenuation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_receive_if_attenuation() const {
  return receive_if_attenuation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::receive_if_attenuation() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.receive_if_attenuation)
  return _internal_receive_if_attenuation();
}
inline void CalibrationParam::_internal_set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  receive_if_attenuation_ = value;
}
inline void CalibrationParam::set_receive_if_attenuation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_receive_if_attenuation(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.receive_if_attenuation)
}

// int32 attenuation_mode = 8;
inline void CalibrationParam::clear_attenuation_mode() {
  attenuation_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::_internal_attenuation_mode() const {
  return attenuation_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CalibrationParam::attenuation_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.attenuation_mode)
  return _internal_attenuation_mode();
}
inline void CalibrationParam::_internal_set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attenuation_mode_ = value;
}
inline void CalibrationParam::set_attenuation_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attenuation_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam.attenuation_mode)
}

// -------------------------------------------------------------------

// ThresholdMode

// int32 mode = 1;
inline void ThresholdMode::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThresholdMode::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThresholdMode::mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode.mode)
  return _internal_mode();
}
inline void ThresholdMode::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void ThresholdMode::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode.mode)
}

// int32 value = 2;
inline void ThresholdMode::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThresholdMode::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThresholdMode::value() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode.value)
  return _internal_value();
}
inline void ThresholdMode::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void ThresholdMode::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode.value)
}

// -------------------------------------------------------------------

// BandParam

// .zb.dcts.node.spectrum.FrequencySpan span = 1;
inline bool BandParam::_internal_has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline bool BandParam::has_span() const {
  return _internal_has_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& BandParam::_internal_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& BandParam::span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.BandParam.span)
  return _internal_span();
}
inline void BandParam::unsafe_arena_set_allocated_span(
    ::zb::dcts::node::spectrum::FrequencySpan* span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  span_ = span;
  if (span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.BandParam.span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* BandParam::release_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* BandParam::unsafe_arena_release_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.BandParam.span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* BandParam::_internal_mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    span_ = p;
  }
  return span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* BandParam::mutable_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.BandParam.span)
  return _internal_mutable_span();
}
inline void BandParam::set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  if (span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span)->GetArena();
    if (message_arena != submessage_arena) {
      span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.BandParam.span)
}

// double IF_bandwidth = 2;
inline void BandParam::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline double BandParam::_internal_if_bandwidth() const {
  return if_bandwidth_;
}
inline double BandParam::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.BandParam.IF_bandwidth)
  return _internal_if_bandwidth();
}
inline void BandParam::_internal_set_if_bandwidth(double value) {
  
  if_bandwidth_ = value;
}
inline void BandParam::set_if_bandwidth(double value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.BandParam.IF_bandwidth)
}

// -------------------------------------------------------------------

// SpectrumData

// .zb.dcts.node.spectrum.FrequencySpan span = 1;
inline bool SpectrumData::_internal_has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline bool SpectrumData::has_span() const {
  return _internal_has_span();
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& SpectrumData::_internal_span() const {
  const ::zb::dcts::node::spectrum::FrequencySpan* p = span_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::FrequencySpan&>(
      ::zb::dcts::node::spectrum::_FrequencySpan_default_instance_);
}
inline const ::zb::dcts::node::spectrum::FrequencySpan& SpectrumData::span() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.span)
  return _internal_span();
}
inline void SpectrumData::unsafe_arena_set_allocated_span(
    ::zb::dcts::node::spectrum::FrequencySpan* span) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  span_ = span;
  if (span) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.span)
}
inline ::zb::dcts::node::spectrum::FrequencySpan* SpectrumData::release_span() {
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* SpectrumData::unsafe_arena_release_span() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.span)
  
  ::zb::dcts::node::spectrum::FrequencySpan* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* SpectrumData::_internal_mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::FrequencySpan>(GetArena());
    span_ = p;
  }
  return span_;
}
inline ::zb::dcts::node::spectrum::FrequencySpan* SpectrumData::mutable_span() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.span)
  return _internal_mutable_span();
}
inline void SpectrumData::set_allocated_span(::zb::dcts::node::spectrum::FrequencySpan* span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  if (span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(span)->GetArena();
    if (message_arena != submessage_arena) {
      span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.span)
}

// repeated float amplitude = 2;
inline int SpectrumData::_internal_amplitude_size() const {
  return amplitude_.size();
}
inline int SpectrumData::amplitude_size() const {
  return _internal_amplitude_size();
}
inline void SpectrumData::clear_amplitude() {
  amplitude_.Clear();
}
inline float SpectrumData::_internal_amplitude(int index) const {
  return amplitude_.Get(index);
}
inline float SpectrumData::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.amplitude)
  return _internal_amplitude(index);
}
inline void SpectrumData::set_amplitude(int index, float value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.amplitude)
}
inline void SpectrumData::_internal_add_amplitude(float value) {
  amplitude_.Add(value);
}
inline void SpectrumData::add_amplitude(float value) {
  _internal_add_amplitude(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.amplitude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SpectrumData::_internal_amplitude() const {
  return amplitude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SpectrumData::amplitude() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.amplitude)
  return _internal_amplitude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SpectrumData::_internal_mutable_amplitude() {
  return &amplitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SpectrumData::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.module.spatailSpectrum.internal.SpectrumData.amplitude)
  return _internal_mutable_amplitude();
}

// -------------------------------------------------------------------

// PanoramicScanRequest

// .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
inline bool PanoramicScanRequest::_internal_has_work_mode() const {
  return this != internal_default_instance() && work_mode_ != nullptr;
}
inline bool PanoramicScanRequest::has_work_mode() const {
  return _internal_has_work_mode();
}
inline void PanoramicScanRequest::clear_work_mode() {
  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& PanoramicScanRequest::_internal_work_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* p = work_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_WorkMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& PanoramicScanRequest::work_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.work_mode)
  return _internal_work_mode();
}
inline void PanoramicScanRequest::unsafe_arena_set_allocated_work_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_mode_);
  }
  work_mode_ = work_mode;
  if (work_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.work_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* PanoramicScanRequest::release_work_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* PanoramicScanRequest::unsafe_arena_release_work_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.work_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* PanoramicScanRequest::_internal_mutable_work_mode() {
  
  if (work_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::WorkMode>(GetArena());
    work_mode_ = p;
  }
  return work_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* PanoramicScanRequest::mutable_work_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.work_mode)
  return _internal_mutable_work_mode();
}
inline void PanoramicScanRequest::set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_mode_;
  }
  if (work_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_mode);
    if (message_arena != submessage_arena) {
      work_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_mode, submessage_arena);
    }
    
  } else {
    
  }
  work_mode_ = work_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.work_mode)
}

// .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
inline bool PanoramicScanRequest::_internal_has_band_param() const {
  return this != internal_default_instance() && band_param_ != nullptr;
}
inline bool PanoramicScanRequest::has_band_param() const {
  return _internal_has_band_param();
}
inline void PanoramicScanRequest::clear_band_param() {
  if (GetArena() == nullptr && band_param_ != nullptr) {
    delete band_param_;
  }
  band_param_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& PanoramicScanRequest::_internal_band_param() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* p = band_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_BandParam_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& PanoramicScanRequest::band_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.band_param)
  return _internal_band_param();
}
inline void PanoramicScanRequest::unsafe_arena_set_allocated_band_param(
    ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_param_);
  }
  band_param_ = band_param;
  if (band_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.band_param)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* PanoramicScanRequest::release_band_param() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* temp = band_param_;
  band_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* PanoramicScanRequest::unsafe_arena_release_band_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.band_param)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* temp = band_param_;
  band_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* PanoramicScanRequest::_internal_mutable_band_param() {
  
  if (band_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::BandParam>(GetArena());
    band_param_ = p;
  }
  return band_param_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* PanoramicScanRequest::mutable_band_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.band_param)
  return _internal_mutable_band_param();
}
inline void PanoramicScanRequest::set_allocated_band_param(::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete band_param_;
  }
  if (band_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(band_param);
    if (message_arena != submessage_arena) {
      band_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band_param, submessage_arena);
    }
    
  } else {
    
  }
  band_param_ = band_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.band_param)
}

// .zb.dcts.node.module.spatailSpectrum.internal.CalibrationParam calibration_param = 3;
inline bool PanoramicScanRequest::_internal_has_calibration_param() const {
  return this != internal_default_instance() && calibration_param_ != nullptr;
}
inline bool PanoramicScanRequest::has_calibration_param() const {
  return _internal_has_calibration_param();
}
inline void PanoramicScanRequest::clear_calibration_param() {
  if (GetArena() == nullptr && calibration_param_ != nullptr) {
    delete calibration_param_;
  }
  calibration_param_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam& PanoramicScanRequest::_internal_calibration_param() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* p = calibration_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_CalibrationParam_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam& PanoramicScanRequest::calibration_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.calibration_param)
  return _internal_calibration_param();
}
inline void PanoramicScanRequest::unsafe_arena_set_allocated_calibration_param(
    ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* calibration_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_param_);
  }
  calibration_param_ = calibration_param;
  if (calibration_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.calibration_param)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* PanoramicScanRequest::release_calibration_param() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* temp = calibration_param_;
  calibration_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* PanoramicScanRequest::unsafe_arena_release_calibration_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.calibration_param)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* temp = calibration_param_;
  calibration_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* PanoramicScanRequest::_internal_mutable_calibration_param() {
  
  if (calibration_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam>(GetArena());
    calibration_param_ = p;
  }
  return calibration_param_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* PanoramicScanRequest::mutable_calibration_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.calibration_param)
  return _internal_mutable_calibration_param();
}
inline void PanoramicScanRequest::set_allocated_calibration_param(::zb::dcts::node::module::spatailSpectrum::internal::CalibrationParam* calibration_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete calibration_param_;
  }
  if (calibration_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(calibration_param);
    if (message_arena != submessage_arena) {
      calibration_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_param, submessage_arena);
    }
    
  } else {
    
  }
  calibration_param_ = calibration_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.calibration_param)
}

// int32 scan_type = 4;
inline void PanoramicScanRequest::clear_scan_type() {
  scan_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PanoramicScanRequest::_internal_scan_type() const {
  return scan_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PanoramicScanRequest::scan_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.scan_type)
  return _internal_scan_type();
}
inline void PanoramicScanRequest::_internal_set_scan_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scan_type_ = value;
}
inline void PanoramicScanRequest::set_scan_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scan_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanRequest.scan_type)
}

// -------------------------------------------------------------------

// PanoramicScanResult

// .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
inline bool PanoramicScanResult::_internal_has_spectrum() const {
  return this != internal_default_instance() && spectrum_ != nullptr;
}
inline bool PanoramicScanResult::has_spectrum() const {
  return _internal_has_spectrum();
}
inline void PanoramicScanResult::clear_spectrum() {
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& PanoramicScanResult::_internal_spectrum() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* p = spectrum_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_SpectrumData_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& PanoramicScanResult::spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult.spectrum)
  return _internal_spectrum();
}
inline void PanoramicScanResult::unsafe_arena_set_allocated_spectrum(
    ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  spectrum_ = spectrum;
  if (spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult.spectrum)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* PanoramicScanResult::release_spectrum() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* PanoramicScanResult::unsafe_arena_release_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult.spectrum)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* PanoramicScanResult::_internal_mutable_spectrum() {
  
  if (spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData>(GetArena());
    spectrum_ = p;
  }
  return spectrum_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* PanoramicScanResult::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult.spectrum)
  return _internal_mutable_spectrum();
}
inline void PanoramicScanResult::set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spectrum_;
  }
  if (spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spectrum);
    if (message_arena != submessage_arena) {
      spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_ = spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.PanoramicScanResult.spectrum)
}

// -------------------------------------------------------------------

// DiscreteScanRequest

// .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
inline bool DiscreteScanRequest::_internal_has_work_mode() const {
  return this != internal_default_instance() && work_mode_ != nullptr;
}
inline bool DiscreteScanRequest::has_work_mode() const {
  return _internal_has_work_mode();
}
inline void DiscreteScanRequest::clear_work_mode() {
  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& DiscreteScanRequest::_internal_work_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* p = work_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_WorkMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& DiscreteScanRequest::work_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.work_mode)
  return _internal_work_mode();
}
inline void DiscreteScanRequest::unsafe_arena_set_allocated_work_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_mode_);
  }
  work_mode_ = work_mode;
  if (work_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.work_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DiscreteScanRequest::release_work_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DiscreteScanRequest::unsafe_arena_release_work_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.work_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DiscreteScanRequest::_internal_mutable_work_mode() {
  
  if (work_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::WorkMode>(GetArena());
    work_mode_ = p;
  }
  return work_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DiscreteScanRequest::mutable_work_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.work_mode)
  return _internal_mutable_work_mode();
}
inline void DiscreteScanRequest::set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_mode_;
  }
  if (work_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_mode);
    if (message_arena != submessage_arena) {
      work_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_mode, submessage_arena);
    }
    
  } else {
    
  }
  work_mode_ = work_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.work_mode)
}

// repeated .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
inline int DiscreteScanRequest::_internal_band_param_size() const {
  return band_param_.size();
}
inline int DiscreteScanRequest::band_param_size() const {
  return _internal_band_param_size();
}
inline void DiscreteScanRequest::clear_band_param() {
  band_param_.Clear();
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* DiscreteScanRequest::mutable_band_param(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.band_param)
  return band_param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam >*
DiscreteScanRequest::mutable_band_param() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.band_param)
  return &band_param_;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& DiscreteScanRequest::_internal_band_param(int index) const {
  return band_param_.Get(index);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& DiscreteScanRequest::band_param(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.band_param)
  return _internal_band_param(index);
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* DiscreteScanRequest::_internal_add_band_param() {
  return band_param_.Add();
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* DiscreteScanRequest::add_band_param() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.band_param)
  return _internal_add_band_param();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::BandParam >&
DiscreteScanRequest::band_param() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanRequest.band_param)
  return band_param_;
}

// -------------------------------------------------------------------

// DiscreteScanResult

// int32 band_index = 1;
inline void DiscreteScanResult::clear_band_index() {
  band_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscreteScanResult::_internal_band_index() const {
  return band_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DiscreteScanResult::band_index() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.band_index)
  return _internal_band_index();
}
inline void DiscreteScanResult::_internal_set_band_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  band_index_ = value;
}
inline void DiscreteScanResult::set_band_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_band_index(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.band_index)
}

// .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 2;
inline bool DiscreteScanResult::_internal_has_spectrum() const {
  return this != internal_default_instance() && spectrum_ != nullptr;
}
inline bool DiscreteScanResult::has_spectrum() const {
  return _internal_has_spectrum();
}
inline void DiscreteScanResult::clear_spectrum() {
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& DiscreteScanResult::_internal_spectrum() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* p = spectrum_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_SpectrumData_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& DiscreteScanResult::spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.spectrum)
  return _internal_spectrum();
}
inline void DiscreteScanResult::unsafe_arena_set_allocated_spectrum(
    ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  spectrum_ = spectrum;
  if (spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.spectrum)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DiscreteScanResult::release_spectrum() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DiscreteScanResult::unsafe_arena_release_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.spectrum)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DiscreteScanResult::_internal_mutable_spectrum() {
  
  if (spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData>(GetArena());
    spectrum_ = p;
  }
  return spectrum_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DiscreteScanResult::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.spectrum)
  return _internal_mutable_spectrum();
}
inline void DiscreteScanResult::set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spectrum_;
  }
  if (spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spectrum);
    if (message_arena != submessage_arena) {
      spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_ = spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DiscreteScanResult.spectrum)
}

// -------------------------------------------------------------------

// DirectionRequest

// .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
inline bool DirectionRequest::_internal_has_work_mode() const {
  return this != internal_default_instance() && work_mode_ != nullptr;
}
inline bool DirectionRequest::has_work_mode() const {
  return _internal_has_work_mode();
}
inline void DirectionRequest::clear_work_mode() {
  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& DirectionRequest::_internal_work_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* p = work_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_WorkMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& DirectionRequest::work_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.work_mode)
  return _internal_work_mode();
}
inline void DirectionRequest::unsafe_arena_set_allocated_work_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_mode_);
  }
  work_mode_ = work_mode;
  if (work_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.work_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DirectionRequest::release_work_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DirectionRequest::unsafe_arena_release_work_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.work_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DirectionRequest::_internal_mutable_work_mode() {
  
  if (work_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::WorkMode>(GetArena());
    work_mode_ = p;
  }
  return work_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* DirectionRequest::mutable_work_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.work_mode)
  return _internal_mutable_work_mode();
}
inline void DirectionRequest::set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_mode_;
  }
  if (work_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_mode);
    if (message_arena != submessage_arena) {
      work_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_mode, submessage_arena);
    }
    
  } else {
    
  }
  work_mode_ = work_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.work_mode)
}

// double center_freq = 2;
inline void DirectionRequest::clear_center_freq() {
  center_freq_ = 0;
}
inline double DirectionRequest::_internal_center_freq() const {
  return center_freq_;
}
inline double DirectionRequest::center_freq() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.center_freq)
  return _internal_center_freq();
}
inline void DirectionRequest::_internal_set_center_freq(double value) {
  
  center_freq_ = value;
}
inline void DirectionRequest::set_center_freq(double value) {
  _internal_set_center_freq(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.center_freq)
}

// double if_bandwidth = 3;
inline void DirectionRequest::clear_if_bandwidth() {
  if_bandwidth_ = 0;
}
inline double DirectionRequest::_internal_if_bandwidth() const {
  return if_bandwidth_;
}
inline double DirectionRequest::if_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.if_bandwidth)
  return _internal_if_bandwidth();
}
inline void DirectionRequest::_internal_set_if_bandwidth(double value) {
  
  if_bandwidth_ = value;
}
inline void DirectionRequest::set_if_bandwidth(double value) {
  _internal_set_if_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.if_bandwidth)
}

// double df_bandwidth = 4;
inline void DirectionRequest::clear_df_bandwidth() {
  df_bandwidth_ = 0;
}
inline double DirectionRequest::_internal_df_bandwidth() const {
  return df_bandwidth_;
}
inline double DirectionRequest::df_bandwidth() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.df_bandwidth)
  return _internal_df_bandwidth();
}
inline void DirectionRequest::_internal_set_df_bandwidth(double value) {
  
  df_bandwidth_ = value;
}
inline void DirectionRequest::set_df_bandwidth(double value) {
  _internal_set_df_bandwidth(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.df_bandwidth)
}

// .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 5;
inline bool DirectionRequest::_internal_has_threshold_mode() const {
  return this != internal_default_instance() && threshold_mode_ != nullptr;
}
inline bool DirectionRequest::has_threshold_mode() const {
  return _internal_has_threshold_mode();
}
inline void DirectionRequest::clear_threshold_mode() {
  if (GetArena() == nullptr && threshold_mode_ != nullptr) {
    delete threshold_mode_;
  }
  threshold_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& DirectionRequest::_internal_threshold_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* p = threshold_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_ThresholdMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& DirectionRequest::threshold_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.threshold_mode)
  return _internal_threshold_mode();
}
inline void DirectionRequest::unsafe_arena_set_allocated_threshold_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(threshold_mode_);
  }
  threshold_mode_ = threshold_mode;
  if (threshold_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.threshold_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* DirectionRequest::release_threshold_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* temp = threshold_mode_;
  threshold_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* DirectionRequest::unsafe_arena_release_threshold_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.threshold_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* temp = threshold_mode_;
  threshold_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* DirectionRequest::_internal_mutable_threshold_mode() {
  
  if (threshold_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode>(GetArena());
    threshold_mode_ = p;
  }
  return threshold_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* DirectionRequest::mutable_threshold_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.threshold_mode)
  return _internal_mutable_threshold_mode();
}
inline void DirectionRequest::set_allocated_threshold_mode(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete threshold_mode_;
  }
  if (threshold_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(threshold_mode);
    if (message_arena != submessage_arena) {
      threshold_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_mode, submessage_arena);
    }
    
  } else {
    
  }
  threshold_mode_ = threshold_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.threshold_mode)
}

// int32 target_count = 6;
inline void DirectionRequest::clear_target_count() {
  target_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectionRequest::_internal_target_count() const {
  return target_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DirectionRequest::target_count() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.target_count)
  return _internal_target_count();
}
inline void DirectionRequest::_internal_set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_count_ = value;
}
inline void DirectionRequest::set_target_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_count(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DirectionRequest.target_count)
}

// -------------------------------------------------------------------

// TargetDirection

// double center_frequency = 1;
inline void TargetDirection::clear_center_frequency() {
  center_frequency_ = 0;
}
inline double TargetDirection::_internal_center_frequency() const {
  return center_frequency_;
}
inline double TargetDirection::center_frequency() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.center_frequency)
  return _internal_center_frequency();
}
inline void TargetDirection::_internal_set_center_frequency(double value) {
  
  center_frequency_ = value;
}
inline void TargetDirection::set_center_frequency(double value) {
  _internal_set_center_frequency(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.center_frequency)
}

// double direction = 2;
inline void TargetDirection::clear_direction() {
  direction_ = 0;
}
inline double TargetDirection::_internal_direction() const {
  return direction_;
}
inline double TargetDirection::direction() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.direction)
  return _internal_direction();
}
inline void TargetDirection::_internal_set_direction(double value) {
  
  direction_ = value;
}
inline void TargetDirection::set_direction(double value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.direction)
}

// int32 confidence = 3;
inline void TargetDirection::clear_confidence() {
  confidence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirection::_internal_confidence() const {
  return confidence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TargetDirection::confidence() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.confidence)
  return _internal_confidence();
}
inline void TargetDirection::_internal_set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confidence_ = value;
}
inline void TargetDirection::set_confidence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.confidence)
}

// float amplitude = 4;
inline void TargetDirection::clear_amplitude() {
  amplitude_ = 0;
}
inline float TargetDirection::_internal_amplitude() const {
  return amplitude_;
}
inline float TargetDirection::amplitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.amplitude)
  return _internal_amplitude();
}
inline void TargetDirection::_internal_set_amplitude(float value) {
  
  amplitude_ = value;
}
inline void TargetDirection::set_amplitude(float value) {
  _internal_set_amplitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.TargetDirection.amplitude)
}

// -------------------------------------------------------------------

// DirectionResult

// repeated .zb.dcts.node.module.spatailSpectrum.internal.TargetDirection target_detection = 1;
inline int DirectionResult::_internal_target_detection_size() const {
  return target_detection_.size();
}
inline int DirectionResult::target_detection_size() const {
  return _internal_target_detection_size();
}
inline void DirectionResult::clear_target_detection() {
  target_detection_.Clear();
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* DirectionResult::mutable_target_detection(int index) {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult.target_detection)
  return target_detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection >*
DirectionResult::mutable_target_detection() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult.target_detection)
  return &target_detection_;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection& DirectionResult::_internal_target_detection(int index) const {
  return target_detection_.Get(index);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection& DirectionResult::target_detection(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult.target_detection)
  return _internal_target_detection(index);
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* DirectionResult::_internal_add_target_detection() {
  return target_detection_.Add();
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection* DirectionResult::add_target_detection() {
  // @@protoc_insertion_point(field_add:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult.target_detection)
  return _internal_add_target_detection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::zb::dcts::node::module::spatailSpectrum::internal::TargetDirection >&
DirectionResult::target_detection() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.module.spatailSpectrum.internal.DirectionResult.target_detection)
  return target_detection_;
}

// -------------------------------------------------------------------

// DirectionSpectrum

// .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
inline bool DirectionSpectrum::_internal_has_spectrum() const {
  return this != internal_default_instance() && spectrum_ != nullptr;
}
inline bool DirectionSpectrum::has_spectrum() const {
  return _internal_has_spectrum();
}
inline void DirectionSpectrum::clear_spectrum() {
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& DirectionSpectrum::_internal_spectrum() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* p = spectrum_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_SpectrumData_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& DirectionSpectrum::spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum.spectrum)
  return _internal_spectrum();
}
inline void DirectionSpectrum::unsafe_arena_set_allocated_spectrum(
    ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  spectrum_ = spectrum;
  if (spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum.spectrum)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DirectionSpectrum::release_spectrum() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DirectionSpectrum::unsafe_arena_release_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum.spectrum)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DirectionSpectrum::_internal_mutable_spectrum() {
  
  if (spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData>(GetArena());
    spectrum_ = p;
  }
  return spectrum_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* DirectionSpectrum::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum.spectrum)
  return _internal_mutable_spectrum();
}
inline void DirectionSpectrum::set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spectrum_;
  }
  if (spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spectrum);
    if (message_arena != submessage_arena) {
      spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_ = spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.DirectionSpectrum.spectrum)
}

// -------------------------------------------------------------------

// SignalAnalysisRequest

// .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
inline bool SignalAnalysisRequest::_internal_has_work_mode() const {
  return this != internal_default_instance() && work_mode_ != nullptr;
}
inline bool SignalAnalysisRequest::has_work_mode() const {
  return _internal_has_work_mode();
}
inline void SignalAnalysisRequest::clear_work_mode() {
  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& SignalAnalysisRequest::_internal_work_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* p = work_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_WorkMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& SignalAnalysisRequest::work_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.work_mode)
  return _internal_work_mode();
}
inline void SignalAnalysisRequest::unsafe_arena_set_allocated_work_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_mode_);
  }
  work_mode_ = work_mode;
  if (work_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.work_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* SignalAnalysisRequest::release_work_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* SignalAnalysisRequest::unsafe_arena_release_work_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.work_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* SignalAnalysisRequest::_internal_mutable_work_mode() {
  
  if (work_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::WorkMode>(GetArena());
    work_mode_ = p;
  }
  return work_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* SignalAnalysisRequest::mutable_work_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.work_mode)
  return _internal_mutable_work_mode();
}
inline void SignalAnalysisRequest::set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_mode_;
  }
  if (work_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_mode);
    if (message_arena != submessage_arena) {
      work_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_mode, submessage_arena);
    }
    
  } else {
    
  }
  work_mode_ = work_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.work_mode)
}

// .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
inline bool SignalAnalysisRequest::_internal_has_band_param() const {
  return this != internal_default_instance() && band_param_ != nullptr;
}
inline bool SignalAnalysisRequest::has_band_param() const {
  return _internal_has_band_param();
}
inline void SignalAnalysisRequest::clear_band_param() {
  if (GetArena() == nullptr && band_param_ != nullptr) {
    delete band_param_;
  }
  band_param_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& SignalAnalysisRequest::_internal_band_param() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* p = band_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_BandParam_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& SignalAnalysisRequest::band_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.band_param)
  return _internal_band_param();
}
inline void SignalAnalysisRequest::unsafe_arena_set_allocated_band_param(
    ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_param_);
  }
  band_param_ = band_param;
  if (band_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.band_param)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* SignalAnalysisRequest::release_band_param() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* temp = band_param_;
  band_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* SignalAnalysisRequest::unsafe_arena_release_band_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.band_param)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* temp = band_param_;
  band_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* SignalAnalysisRequest::_internal_mutable_band_param() {
  
  if (band_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::BandParam>(GetArena());
    band_param_ = p;
  }
  return band_param_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* SignalAnalysisRequest::mutable_band_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.band_param)
  return _internal_mutable_band_param();
}
inline void SignalAnalysisRequest::set_allocated_band_param(::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete band_param_;
  }
  if (band_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(band_param);
    if (message_arena != submessage_arena) {
      band_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band_param, submessage_arena);
    }
    
  } else {
    
  }
  band_param_ = band_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.band_param)
}

// .zb.dcts.node.module.spatailSpectrum.internal.ThresholdMode threshold_mode = 3;
inline bool SignalAnalysisRequest::_internal_has_threshold_mode() const {
  return this != internal_default_instance() && threshold_mode_ != nullptr;
}
inline bool SignalAnalysisRequest::has_threshold_mode() const {
  return _internal_has_threshold_mode();
}
inline void SignalAnalysisRequest::clear_threshold_mode() {
  if (GetArena() == nullptr && threshold_mode_ != nullptr) {
    delete threshold_mode_;
  }
  threshold_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& SignalAnalysisRequest::_internal_threshold_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* p = threshold_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_ThresholdMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode& SignalAnalysisRequest::threshold_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.threshold_mode)
  return _internal_threshold_mode();
}
inline void SignalAnalysisRequest::unsafe_arena_set_allocated_threshold_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(threshold_mode_);
  }
  threshold_mode_ = threshold_mode;
  if (threshold_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.threshold_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* SignalAnalysisRequest::release_threshold_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* temp = threshold_mode_;
  threshold_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* SignalAnalysisRequest::unsafe_arena_release_threshold_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.threshold_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* temp = threshold_mode_;
  threshold_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* SignalAnalysisRequest::_internal_mutable_threshold_mode() {
  
  if (threshold_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode>(GetArena());
    threshold_mode_ = p;
  }
  return threshold_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* SignalAnalysisRequest::mutable_threshold_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.threshold_mode)
  return _internal_mutable_threshold_mode();
}
inline void SignalAnalysisRequest::set_allocated_threshold_mode(::zb::dcts::node::module::spatailSpectrum::internal::ThresholdMode* threshold_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete threshold_mode_;
  }
  if (threshold_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(threshold_mode);
    if (message_arena != submessage_arena) {
      threshold_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, threshold_mode, submessage_arena);
    }
    
  } else {
    
  }
  threshold_mode_ = threshold_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisRequest.threshold_mode)
}

// -------------------------------------------------------------------

// SignalAnalysisResult

// .zb.dcts.node.spectrum.SignalBand signal_band = 1;
inline bool SignalAnalysisResult::_internal_has_signal_band() const {
  return this != internal_default_instance() && signal_band_ != nullptr;
}
inline bool SignalAnalysisResult::has_signal_band() const {
  return _internal_has_signal_band();
}
inline const ::zb::dcts::node::spectrum::SignalBand& SignalAnalysisResult::_internal_signal_band() const {
  const ::zb::dcts::node::spectrum::SignalBand* p = signal_band_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::SignalBand&>(
      ::zb::dcts::node::spectrum::_SignalBand_default_instance_);
}
inline const ::zb::dcts::node::spectrum::SignalBand& SignalAnalysisResult::signal_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.signal_band)
  return _internal_signal_band();
}
inline void SignalAnalysisResult::unsafe_arena_set_allocated_signal_band(
    ::zb::dcts::node::spectrum::SignalBand* signal_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  signal_band_ = signal_band;
  if (signal_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.signal_band)
}
inline ::zb::dcts::node::spectrum::SignalBand* SignalAnalysisResult::release_signal_band() {
  
  ::zb::dcts::node::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::SignalBand* SignalAnalysisResult::unsafe_arena_release_signal_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.signal_band)
  
  ::zb::dcts::node::spectrum::SignalBand* temp = signal_band_;
  signal_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::SignalBand* SignalAnalysisResult::_internal_mutable_signal_band() {
  
  if (signal_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::SignalBand>(GetArena());
    signal_band_ = p;
  }
  return signal_band_;
}
inline ::zb::dcts::node::spectrum::SignalBand* SignalAnalysisResult::mutable_signal_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.signal_band)
  return _internal_mutable_signal_band();
}
inline void SignalAnalysisResult::set_allocated_signal_band(::zb::dcts::node::spectrum::SignalBand* signal_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band_);
  }
  if (signal_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal_band)->GetArena();
    if (message_arena != submessage_arena) {
      signal_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_band, submessage_arena);
    }
    
  } else {
    
  }
  signal_band_ = signal_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.signal_band)
}

// .zb.dcts.node.modulation.ModType modulation_type = 2;
inline void SignalAnalysisResult::clear_modulation_type() {
  modulation_type_ = 0;
}
inline ::zb::dcts::node::modulation::ModType SignalAnalysisResult::_internal_modulation_type() const {
  return static_cast< ::zb::dcts::node::modulation::ModType >(modulation_type_);
}
inline ::zb::dcts::node::modulation::ModType SignalAnalysisResult::modulation_type() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.modulation_type)
  return _internal_modulation_type();
}
inline void SignalAnalysisResult::_internal_set_modulation_type(::zb::dcts::node::modulation::ModType value) {
  
  modulation_type_ = value;
}
inline void SignalAnalysisResult::set_modulation_type(::zb::dcts::node::modulation::ModType value) {
  _internal_set_modulation_type(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.modulation_type)
}

// float amplitude = 3;
inline void SignalAnalysisResult::clear_amplitude() {
  amplitude_ = 0;
}
inline float SignalAnalysisResult::_internal_amplitude() const {
  return amplitude_;
}
inline float SignalAnalysisResult::amplitude() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.amplitude)
  return _internal_amplitude();
}
inline void SignalAnalysisResult::_internal_set_amplitude(float value) {
  
  amplitude_ = value;
}
inline void SignalAnalysisResult::set_amplitude(float value) {
  _internal_set_amplitude(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisResult.amplitude)
}

// -------------------------------------------------------------------

// SignalAnalysisSpectrum

// .zb.dcts.node.module.spatailSpectrum.internal.SpectrumData spectrum = 1;
inline bool SignalAnalysisSpectrum::_internal_has_spectrum() const {
  return this != internal_default_instance() && spectrum_ != nullptr;
}
inline bool SignalAnalysisSpectrum::has_spectrum() const {
  return _internal_has_spectrum();
}
inline void SignalAnalysisSpectrum::clear_spectrum() {
  if (GetArena() == nullptr && spectrum_ != nullptr) {
    delete spectrum_;
  }
  spectrum_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& SignalAnalysisSpectrum::_internal_spectrum() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* p = spectrum_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_SpectrumData_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData& SignalAnalysisSpectrum::spectrum() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum.spectrum)
  return _internal_spectrum();
}
inline void SignalAnalysisSpectrum::unsafe_arena_set_allocated_spectrum(
    ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spectrum_);
  }
  spectrum_ = spectrum;
  if (spectrum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum.spectrum)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* SignalAnalysisSpectrum::release_spectrum() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* SignalAnalysisSpectrum::unsafe_arena_release_spectrum() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum.spectrum)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* temp = spectrum_;
  spectrum_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* SignalAnalysisSpectrum::_internal_mutable_spectrum() {
  
  if (spectrum_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData>(GetArena());
    spectrum_ = p;
  }
  return spectrum_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* SignalAnalysisSpectrum::mutable_spectrum() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum.spectrum)
  return _internal_mutable_spectrum();
}
inline void SignalAnalysisSpectrum::set_allocated_spectrum(::zb::dcts::node::module::spatailSpectrum::internal::SpectrumData* spectrum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete spectrum_;
  }
  if (spectrum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spectrum);
    if (message_arena != submessage_arena) {
      spectrum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spectrum, submessage_arena);
    }
    
  } else {
    
  }
  spectrum_ = spectrum;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.SignalAnalysisSpectrum.spectrum)
}

// -------------------------------------------------------------------

// IQRequest

// .zb.dcts.node.module.spatailSpectrum.internal.WorkMode work_mode = 1;
inline bool IQRequest::_internal_has_work_mode() const {
  return this != internal_default_instance() && work_mode_ != nullptr;
}
inline bool IQRequest::has_work_mode() const {
  return _internal_has_work_mode();
}
inline void IQRequest::clear_work_mode() {
  if (GetArena() == nullptr && work_mode_ != nullptr) {
    delete work_mode_;
  }
  work_mode_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& IQRequest::_internal_work_mode() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* p = work_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_WorkMode_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode& IQRequest::work_mode() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.work_mode)
  return _internal_work_mode();
}
inline void IQRequest::unsafe_arena_set_allocated_work_mode(
    ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_mode_);
  }
  work_mode_ = work_mode;
  if (work_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.work_mode)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* IQRequest::release_work_mode() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* IQRequest::unsafe_arena_release_work_mode() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.work_mode)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* temp = work_mode_;
  work_mode_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* IQRequest::_internal_mutable_work_mode() {
  
  if (work_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::WorkMode>(GetArena());
    work_mode_ = p;
  }
  return work_mode_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* IQRequest::mutable_work_mode() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.work_mode)
  return _internal_mutable_work_mode();
}
inline void IQRequest::set_allocated_work_mode(::zb::dcts::node::module::spatailSpectrum::internal::WorkMode* work_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete work_mode_;
  }
  if (work_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(work_mode);
    if (message_arena != submessage_arena) {
      work_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_mode, submessage_arena);
    }
    
  } else {
    
  }
  work_mode_ = work_mode;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.work_mode)
}

// .zb.dcts.node.module.spatailSpectrum.internal.BandParam band_param = 2;
inline bool IQRequest::_internal_has_band_param() const {
  return this != internal_default_instance() && band_param_ != nullptr;
}
inline bool IQRequest::has_band_param() const {
  return _internal_has_band_param();
}
inline void IQRequest::clear_band_param() {
  if (GetArena() == nullptr && band_param_ != nullptr) {
    delete band_param_;
  }
  band_param_ = nullptr;
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& IQRequest::_internal_band_param() const {
  const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* p = band_param_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam&>(
      ::zb::dcts::node::module::spatailSpectrum::internal::_BandParam_default_instance_);
}
inline const ::zb::dcts::node::module::spatailSpectrum::internal::BandParam& IQRequest::band_param() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.band_param)
  return _internal_band_param();
}
inline void IQRequest::unsafe_arena_set_allocated_band_param(
    ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(band_param_);
  }
  band_param_ = band_param;
  if (band_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.band_param)
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* IQRequest::release_band_param() {
  
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* temp = band_param_;
  band_param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* IQRequest::unsafe_arena_release_band_param() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.band_param)
  
  ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* temp = band_param_;
  band_param_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* IQRequest::_internal_mutable_band_param() {
  
  if (band_param_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::module::spatailSpectrum::internal::BandParam>(GetArena());
    band_param_ = p;
  }
  return band_param_;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::BandParam* IQRequest::mutable_band_param() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.band_param)
  return _internal_mutable_band_param();
}
inline void IQRequest::set_allocated_band_param(::zb::dcts::node::module::spatailSpectrum::internal::BandParam* band_param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete band_param_;
  }
  if (band_param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(band_param);
    if (message_arena != submessage_arena) {
      band_param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, band_param, submessage_arena);
    }
    
  } else {
    
  }
  band_param_ = band_param;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.band_param)
}

// uint32 points = 3;
inline void IQRequest::clear_points() {
  points_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IQRequest::_internal_points() const {
  return points_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 IQRequest::points() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.points)
  return _internal_points();
}
inline void IQRequest::_internal_set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  points_ = value;
}
inline void IQRequest::set_points(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.IQRequest.points)
}

// -------------------------------------------------------------------

// IQResult

// .zb.dcts.node.spectrum.BaseBand base_band = 1;
inline bool IQResult::_internal_has_base_band() const {
  return this != internal_default_instance() && base_band_ != nullptr;
}
inline bool IQResult::has_base_band() const {
  return _internal_has_base_band();
}
inline const ::zb::dcts::node::spectrum::BaseBand& IQResult::_internal_base_band() const {
  const ::zb::dcts::node::spectrum::BaseBand* p = base_band_;
  return p != nullptr ? *p : reinterpret_cast<const ::zb::dcts::node::spectrum::BaseBand&>(
      ::zb::dcts::node::spectrum::_BaseBand_default_instance_);
}
inline const ::zb::dcts::node::spectrum::BaseBand& IQResult::base_band() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.IQResult.base_band)
  return _internal_base_band();
}
inline void IQResult::unsafe_arena_set_allocated_base_band(
    ::zb::dcts::node::spectrum::BaseBand* base_band) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_band_);
  }
  base_band_ = base_band;
  if (base_band) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.IQResult.base_band)
}
inline ::zb::dcts::node::spectrum::BaseBand* IQResult::release_base_band() {
  
  ::zb::dcts::node::spectrum::BaseBand* temp = base_band_;
  base_band_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::zb::dcts::node::spectrum::BaseBand* IQResult::unsafe_arena_release_base_band() {
  // @@protoc_insertion_point(field_release:zb.dcts.node.module.spatailSpectrum.internal.IQResult.base_band)
  
  ::zb::dcts::node::spectrum::BaseBand* temp = base_band_;
  base_band_ = nullptr;
  return temp;
}
inline ::zb::dcts::node::spectrum::BaseBand* IQResult::_internal_mutable_base_band() {
  
  if (base_band_ == nullptr) {
    auto* p = CreateMaybeMessage<::zb::dcts::node::spectrum::BaseBand>(GetArena());
    base_band_ = p;
  }
  return base_band_;
}
inline ::zb::dcts::node::spectrum::BaseBand* IQResult::mutable_base_band() {
  // @@protoc_insertion_point(field_mutable:zb.dcts.node.module.spatailSpectrum.internal.IQResult.base_band)
  return _internal_mutable_base_band();
}
inline void IQResult::set_allocated_base_band(::zb::dcts::node::spectrum::BaseBand* base_band) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_band_);
  }
  if (base_band) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_band)->GetArena();
    if (message_arena != submessage_arena) {
      base_band = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_band, submessage_arena);
    }
    
  } else {
    
  }
  base_band_ = base_band;
  // @@protoc_insertion_point(field_set_allocated:zb.dcts.node.module.spatailSpectrum.internal.IQResult.base_band)
}

// repeated float data = 4;
inline int IQResult::_internal_data_size() const {
  return data_.size();
}
inline int IQResult::data_size() const {
  return _internal_data_size();
}
inline void IQResult::clear_data() {
  data_.Clear();
}
inline float IQResult::_internal_data(int index) const {
  return data_.Get(index);
}
inline float IQResult::data(int index) const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.IQResult.data)
  return _internal_data(index);
}
inline void IQResult::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.IQResult.data)
}
inline void IQResult::_internal_add_data(float value) {
  data_.Add(value);
}
inline void IQResult::add_data(float value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:zb.dcts.node.module.spatailSpectrum.internal.IQResult.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IQResult::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IQResult::data() const {
  // @@protoc_insertion_point(field_list:zb.dcts.node.module.spatailSpectrum.internal.IQResult.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IQResult::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IQResult::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:zb.dcts.node.module.spatailSpectrum.internal.IQResult.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// DeviceStatus

// bool connected = 1;
inline void DeviceStatus::clear_connected() {
  connected_ = false;
}
inline bool DeviceStatus::_internal_connected() const {
  return connected_;
}
inline bool DeviceStatus::connected() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.connected)
  return _internal_connected();
}
inline void DeviceStatus::_internal_set_connected(bool value) {
  
  connected_ = value;
}
inline void DeviceStatus::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.connected)
}

// float processor_temperature = 2;
inline void DeviceStatus::clear_processor_temperature() {
  processor_temperature_ = 0;
}
inline float DeviceStatus::_internal_processor_temperature() const {
  return processor_temperature_;
}
inline float DeviceStatus::processor_temperature() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.processor_temperature)
  return _internal_processor_temperature();
}
inline void DeviceStatus::_internal_set_processor_temperature(float value) {
  
  processor_temperature_ = value;
}
inline void DeviceStatus::set_processor_temperature(float value) {
  _internal_set_processor_temperature(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.processor_temperature)
}

// .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus processor_status = 3;
inline void DeviceStatus::clear_processor_status() {
  processor_status_ = 0;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus DeviceStatus::_internal_processor_status() const {
  return static_cast< ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus >(processor_status_);
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus DeviceStatus::processor_status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.processor_status)
  return _internal_processor_status();
}
inline void DeviceStatus::_internal_set_processor_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value) {
  
  processor_status_ = value;
}
inline void DeviceStatus::set_processor_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value) {
  _internal_set_processor_status(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.processor_status)
}

// float receiver_temperature = 4;
inline void DeviceStatus::clear_receiver_temperature() {
  receiver_temperature_ = 0;
}
inline float DeviceStatus::_internal_receiver_temperature() const {
  return receiver_temperature_;
}
inline float DeviceStatus::receiver_temperature() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.receiver_temperature)
  return _internal_receiver_temperature();
}
inline void DeviceStatus::_internal_set_receiver_temperature(float value) {
  
  receiver_temperature_ = value;
}
inline void DeviceStatus::set_receiver_temperature(float value) {
  _internal_set_receiver_temperature(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.receiver_temperature)
}

// .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus receiver_status = 5;
inline void DeviceStatus::clear_receiver_status() {
  receiver_status_ = 0;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus DeviceStatus::_internal_receiver_status() const {
  return static_cast< ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus >(receiver_status_);
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus DeviceStatus::receiver_status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.receiver_status)
  return _internal_receiver_status();
}
inline void DeviceStatus::_internal_set_receiver_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value) {
  
  receiver_status_ = value;
}
inline void DeviceStatus::set_receiver_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value) {
  _internal_set_receiver_status(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.receiver_status)
}

// float mainctl_kernel_temp = 6;
inline void DeviceStatus::clear_mainctl_kernel_temp() {
  mainctl_kernel_temp_ = 0;
}
inline float DeviceStatus::_internal_mainctl_kernel_temp() const {
  return mainctl_kernel_temp_;
}
inline float DeviceStatus::mainctl_kernel_temp() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_kernel_temp)
  return _internal_mainctl_kernel_temp();
}
inline void DeviceStatus::_internal_set_mainctl_kernel_temp(float value) {
  
  mainctl_kernel_temp_ = value;
}
inline void DeviceStatus::set_mainctl_kernel_temp(float value) {
  _internal_set_mainctl_kernel_temp(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_kernel_temp)
}

// float mainctl_temperature = 7;
inline void DeviceStatus::clear_mainctl_temperature() {
  mainctl_temperature_ = 0;
}
inline float DeviceStatus::_internal_mainctl_temperature() const {
  return mainctl_temperature_;
}
inline float DeviceStatus::mainctl_temperature() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_temperature)
  return _internal_mainctl_temperature();
}
inline void DeviceStatus::_internal_set_mainctl_temperature(float value) {
  
  mainctl_temperature_ = value;
}
inline void DeviceStatus::set_mainctl_temperature(float value) {
  _internal_set_mainctl_temperature(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_temperature)
}

// float mainctl_humidity = 8;
inline void DeviceStatus::clear_mainctl_humidity() {
  mainctl_humidity_ = 0;
}
inline float DeviceStatus::_internal_mainctl_humidity() const {
  return mainctl_humidity_;
}
inline float DeviceStatus::mainctl_humidity() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_humidity)
  return _internal_mainctl_humidity();
}
inline void DeviceStatus::_internal_set_mainctl_humidity(float value) {
  
  mainctl_humidity_ = value;
}
inline void DeviceStatus::set_mainctl_humidity(float value) {
  _internal_set_mainctl_humidity(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_humidity)
}

// float mainctl_vccin = 9;
inline void DeviceStatus::clear_mainctl_vccin() {
  mainctl_vccin_ = 0;
}
inline float DeviceStatus::_internal_mainctl_vccin() const {
  return mainctl_vccin_;
}
inline float DeviceStatus::mainctl_vccin() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_vccin)
  return _internal_mainctl_vccin();
}
inline void DeviceStatus::_internal_set_mainctl_vccin(float value) {
  
  mainctl_vccin_ = value;
}
inline void DeviceStatus::set_mainctl_vccin(float value) {
  _internal_set_mainctl_vccin(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_vccin)
}

// .zb.dcts.node.module.spatailSpectrum.internal.ModuleStatus mainctl_status = 10;
inline void DeviceStatus::clear_mainctl_status() {
  mainctl_status_ = 0;
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus DeviceStatus::_internal_mainctl_status() const {
  return static_cast< ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus >(mainctl_status_);
}
inline ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus DeviceStatus::mainctl_status() const {
  // @@protoc_insertion_point(field_get:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_status)
  return _internal_mainctl_status();
}
inline void DeviceStatus::_internal_set_mainctl_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value) {
  
  mainctl_status_ = value;
}
inline void DeviceStatus::set_mainctl_status(::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus value) {
  _internal_set_mainctl_status(value);
  // @@protoc_insertion_point(field_set:zb.dcts.node.module.spatailSpectrum.internal.DeviceStatus.mainctl_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace spatailSpectrum
}  // namespace module
}  // namespace node
}  // namespace dcts
}  // namespace zb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode>() {
  return ::zb::dcts::node::module::spatailSpectrum::internal::DeviceReply_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus>() {
  return ::zb::dcts::node::module::spatailSpectrum::internal::ModuleStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2fmodule_2fspatialSpectrumInternal_2eproto
